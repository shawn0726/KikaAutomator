Index: conftest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># coding: utf-8\n\n\n'''\n全局配置\n'''\nimport logging\nimport multiprocessing\nimport os\nimport time\n\nimport xlrd\nimport pytest\nimport yaml\nfrom appium import webdriver\n\n# from drivers.android import device_android\nfrom lib.device_data import keep_port_available, start_appium, get_platform_version, start_devices\n\n# from lib.start_service import device_id_list, driver_pool\n\nscript_path_up = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\ncase_data_path = script_path_up + '/KikaAutomator/data/case_data.yml'\ntest_case_data = yaml.safe_load(open(case_data_path, 'r'))\ncase_id_data_path = os.path.dirname(os.path.abspath(__file__)) + '/case_id.xlsx'\n# MAX_POOL_NUMBER = 1\ndevice_id_list = []\n\n#调用设备 ID 列表\n\n@pytest.fixture(scope='session', autouse=True)\ndef set_device_id_list():\n    device_id_list.clear()\n    list1 = start_devices()\n    for i in range(len(list1)):\n        device_id_list.append(list1[i])\n    return device_id_list\n    # return ['2962de230205']\n\n\n\n# 解析附加参数\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--cmdopt\", action=\"store\", default=\"0\", help=\"my option: 0 or 1\"\n    )\n\n# 选择指令\n@pytest.fixture(scope='session', autouse=True)\ndef cmdopt(request):\n    return request.config.getoption(\"--cmdopt\")\n\n# 分发devicesID\n@pytest.fixture\ndef deliver_event():\n    wb = xlrd.open_workbook(filename=case_id_data_path)\n    sheet1 = wb.sheet_by_index(0)\n    case_id = sheet1.col_values(1)\n    pool_id = sheet1.col_values(1)\n    case_id.pop(0)\n    pool_id.pop(0)\n    return case_id, pool_id\n\n#获取驱动程序池\n# @pytest.fixture\n# def get_driver_pool():\n#     driver_pool = []\n#     return driver_pool\n\n\n@pytest.fixture(scope='session', autouse=True)\ndef set_driver_pool(cmdopt):\n    driver_pool = []\n    device_id_list_num = len(device_id_list)\n    real_pool_number = 1\n    #min(device_id_list_num, MAX_POOL_NUMBER)\n    port_id = 4724\n    # bp_id = 99\n    sys_port = 8200\n    if device_id_list_num != 0:\n        p = multiprocessing.Pool(real_pool_number)\n        print(p)\n\n    port_id = port_id + int(cmdopt)\n    # bp_id = bp_id + int(cmdopt)\n    sys_port = sys_port + int(cmdopt)\n    keep_port_available(port_id)\n\n    try:\n        p.apply_async(start_appium, args=(port_id, device_id_list[int(cmdopt)],))\n    except Exception as e:\n        e\n        # Log_info().getlog('start-appium-test-case').debug(e)\n    # wait(10)\n    time.sleep(3)\n    plat_form_version = get_platform_version(device_id_list[int(cmdopt)])\n\n    '''\n    com.huawei.ohos.inputmethod\n    '''\n    try:\n        caps = {'platformName': 'Android', 'platformVersion': plat_form_version, 'deviceName': 'nexus 6p',\n                'newCommandTimeout': 0,\n                'appPackage': 'com.xinmei365.emptyinput',\n                'appActivity': 'com.xinmei365.emptyinput.MainActivity',\n                'systemPort': sys_port,\n                'automationName': 'UiAutomator2',\n                'disableSuppressAccessibilityService': True,\n                'enableMultiWindows': True,\n                'allowInvisibleElements': True,\n                'ignoreUnimportantViews': False,\n                'id': device_id_list[int(cmdopt)]}\n\n        driver = webdriver.Remote('http://localhost:' + str(port_id) + '/wd/hub', caps)\n        print(driver,\"这是driver\")\n        # driver = drivers.devices_driver.devs('http://localhost:' + str(port_id) + '/wd/hub', caps)\n        driver.implicitly_wait(5)\n        driver_pool.append(driver)\n        return driver_pool\n\n\n    except Exception as e:\n        e\n        pass\n    #     # Log_info().getlog('start-drive-test-case').debug(e)\n    #     time.sleep(2)\n    #     p.close()\n    #     p.terminate()\n    #     yield driver\n\n\nif __name__ == '__main__':\n    multiprocessing.set_start_method('spawn')\n    set_driver_pool()\n\n\n\n\n# #初始化设备\n#\n# @pytest.fixture(scope='session',autouse=True)\n# def driver():\n#     try:\n#         driver = drivers.android.device_android()\n#         # driver = drivers.android.device_android(\"192.168.129.93\")\n#         # log.info(\"已连接设备:{}\".format(driver.info['productName']))\n#         return driver\n#     except Exception as e:\n#         log.info(\"初始化driver异常!{}\".format(e))\n\n# def pytest_collection_modifyitems(items):\n#     for item in items:\n#         item.name = item.name.encode(\"utf-8\").decode(\"unicode_escape\")\n#         item._nodeid = item.nodeid.encode(\"utf-8\").decode(\"unicode_escape\")\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/conftest.py b/conftest.py
--- a/conftest.py	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/conftest.py	(date 1640938475231)
@@ -17,17 +17,15 @@
 # from drivers.android import device_android
 from lib.device_data import keep_port_available, start_appium, get_platform_version, start_devices
 
-# from lib.start_service import device_id_list, driver_pool
 
 script_path_up = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
 case_data_path = script_path_up + '/KikaAutomator/data/case_data.yml'
 test_case_data = yaml.safe_load(open(case_data_path, 'r'))
 case_id_data_path = os.path.dirname(os.path.abspath(__file__)) + '/case_id.xlsx'
-# MAX_POOL_NUMBER = 1
+MAX_POOL_NUMBER = 2
 device_id_list = []
 
 #调用设备 ID 列表
-
 @pytest.fixture(scope='session', autouse=True)
 def set_device_id_list():
     device_id_list.clear()
@@ -35,7 +33,7 @@
     for i in range(len(list1)):
         device_id_list.append(list1[i])
     return device_id_list
-    # return ['2962de230205']
+
 
 
 
@@ -50,6 +48,10 @@
 def cmdopt(request):
     return request.config.getoption("--cmdopt")
 
+
+
+
+
 # 分发devicesID
 @pytest.fixture
 def deliver_event():
@@ -67,13 +69,12 @@
 #     driver_pool = []
 #     return driver_pool
 
-
+# 设置驱动池
 @pytest.fixture(scope='session', autouse=True)
-def set_driver_pool(cmdopt):
+def set_driver_pool():
     driver_pool = []
     device_id_list_num = len(device_id_list)
-    real_pool_number = 1
-    #min(device_id_list_num, MAX_POOL_NUMBER)
+    real_pool_number = min(device_id_list_num, MAX_POOL_NUMBER) #人为控制设备运行数量
     port_id = 4724
     # bp_id = 99
     sys_port = 8200
@@ -81,52 +82,46 @@
         p = multiprocessing.Pool(real_pool_number)
         print(p)
 
-    port_id = port_id + int(cmdopt)
-    # bp_id = bp_id + int(cmdopt)
-    sys_port = sys_port + int(cmdopt)
-    keep_port_available(port_id)
-
-    try:
-        p.apply_async(start_appium, args=(port_id, device_id_list[int(cmdopt)],))
-    except Exception as e:
-        e
-        # Log_info().getlog('start-appium-test-case').debug(e)
-    # wait(10)
-    time.sleep(3)
-    plat_form_version = get_platform_version(device_id_list[int(cmdopt)])
+        for i in range(real_pool_number):
+            port_id = port_id + int(i)
+            # bp_id = bp_id + int(cmdopt)
+            sys_port = sys_port + int(i)
+            keep_port_available(port_id)
+            try:
+                p.apply_async(start_appium, args=(port_id, device_id_list[int(i)],))
+            except Exception as e:
+                print('报错喽---%s'%e)
+            time.sleep(3)
+            plat_form_version = get_platform_version(device_id_list[int(i)])
 
-    '''
-    com.huawei.ohos.inputmethod
-    '''
-    try:
-        caps = {'platformName': 'Android', 'platformVersion': plat_form_version, 'deviceName': 'nexus 6p',
-                'newCommandTimeout': 0,
-                'appPackage': 'com.xinmei365.emptyinput',
-                'appActivity': 'com.xinmei365.emptyinput.MainActivity',
-                'systemPort': sys_port,
-                'automationName': 'UiAutomator2',
-                'disableSuppressAccessibilityService': True,
-                'enableMultiWindows': True,
-                'allowInvisibleElements': True,
-                'ignoreUnimportantViews': False,
-                'id': device_id_list[int(cmdopt)]}
+            '''
+            com.huawei.ohos.inputmethod
+            '''
+            try:
+                caps = {'platformName': 'Android', 'platformVersion': plat_form_version, 'deviceName': 'nexus 6p',
+                        'newCommandTimeout': 0,
+                        'appPackage': 'com.xinmei365.emptyinput',
+                        'appActivity': 'com.xinmei365.emptyinput.MainActivity',
+                        'systemPort': sys_port,
+                        'automationName': 'UiAutomator2',
+                        'disableSuppressAccessibilityService': True,
+                        'enableMultiWindows': True,
+                        'allowInvisibleElements': True,
+                        'ignoreUnimportantViews': False,
+                        'id': device_id_list[int(i)]}
 
-        driver = webdriver.Remote('http://localhost:' + str(port_id) + '/wd/hub', caps)
-        print(driver,"这是driver")
-        # driver = drivers.devices_driver.devs('http://localhost:' + str(port_id) + '/wd/hub', caps)
-        driver.implicitly_wait(5)
-        driver_pool.append(driver)
-        return driver_pool
-
-
-    except Exception as e:
-        e
-        pass
-    #     # Log_info().getlog('start-drive-test-case').debug(e)
-    #     time.sleep(2)
-    #     p.close()
-    #     p.terminate()
-    #     yield driver
+                driver = webdriver.Remote('http://localhost:' + str(port_id) + '/wd/hub', caps)
+                # driver = drivers.devices_driver.devs('http://localhost:' + str(port_id) + '/wd/hub', caps)
+                driver.implicitly_wait(5)
+                driver_pool.append(driver)
+                # return driver_pool
+            except Exception as e:
+                print('启动失败---%s'%e)
+                # Log_info().getlog('start-drive-test-case').debug(e)
+        time.sleep(2)
+        p.close()
+        p.terminate()
+        yield driver_pool
 
 
 if __name__ == '__main__':
Index: pytest.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[pytest]\n\naddopts = -v -s  --html=./report/report.html --self-contained-html\n;;python_files = Test_*.py\n;python_classes = Test*\n;python_functions = test_*\ntestpaths = case/TestCase.py
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytest.ini b/pytest.ini
--- a/pytest.ini	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/pytest.ini	(date 1640938475236)
@@ -1,7 +1,13 @@
 [pytest]
 
 addopts = -v -s  --html=./report/report.html --self-contained-html
-;;python_files = Test_*.py
+;;;python_files = Test_*.py
+;;python_classes = Test*
+;;python_functions = test_*
+;testpaths = case/TestCase.py
+
+python_files = Test*
 ;python_classes = Test*
-;python_functions = test_*
-testpaths = case/TestCase.py
\ No newline at end of file
+python_functions = test_*
+testpaths = ./case
+
Index: case/TestCase3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!usr/bin/env python\n# -*- coding:utf-8 -*-\n# user nanme: Mr.zhang\n# data time : 2021/12/31   11:18 上午\n# project   : Test.py\n# IDE       : PyCharm\n# email     :17600960626@163.com\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/case/TestCase3.py b/case/TestCase3.py
--- a/case/TestCase3.py	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/case/TestCase3.py	(date 1640938475239)
@@ -2,6 +2,6 @@
 # -*- coding:utf-8 -*-
 # user nanme: Mr.zhang
 # data time : 2021/12/31   11:18 上午
-# project   : Test.py
+# project   : TestCase3.py
 # IDE       : PyCharm
 # email     :17600960626@163.com
Index: case/TestCase2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import re\nimport time\nimport os\n\nimport allure\nimport pytest\nfrom selenium.webdriver.common.by import By\n\nimport golVar\nfrom lib.device_data import get_vm_size\nfrom lib.get_path import get_path_data\nfrom page.input_page import InputPage\nfrom page.keyboard_setting_page import KeyboardSettingPage\nfrom page.language_setting_page import LanguageSettingPage\nfrom public.base_function import PATH\n\n'''\n生成allure报告 2 步：\n1、python3 -m pytest testcase/TestCase.py --alluredir report/allure_raw --clean-alluredir\n2、allure generate report/allure_raw -o report/html --clean\n'''\n\nscreen_size_list = []\ntest_case_data = get_path_data('/data/case_data.yml')\ntest_adb_data = get_path_data('/data/adb_data.yml')\n\n# GDPR 弹窗相关控件\n_gdpr_pop_up = (\n    By.XPATH, '/hierarchy/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout')\n_gdpr_disagree = (By.ID,\n                  'com.huawei.ohos.inputmethod:id/btn_deny')\n_gdpr_agree = (By.ID,\n               'com.huawei.ohos.inputmethod:id/btn_ok')\n_gdpr_learn_more = (By.ID, 'com.huawei.ohos.inputmethod:id/tv_content2')\n_input_text_view = (By.CLASS_NAME, 'android.widget.EditText')\n_message_input_box = (By.ID, 'com.google.android.apps.messaging:id/compose_message_text')\n_address_book_dialog = (By.ID, 'com.android.packageinstaller:id/dialog_container')\n\n\n@allure.story('检查字符点击与上屏功能-中文26键')\n# 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\ndef test_InputMethod_SCB_Func_01_01_0002(set_device_id_list, set_driver_pool, cmdopt):\n    # pool 池中 driver 与 device_id 为一对一的关系\n    which_driver_pool = int(cmdopt)\n    driver = set_driver_pool[which_driver_pool]\n    input_page = InputPage(driver)\n    screen_size_list.clear()\n    get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n    os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n    time.sleep(3)\n    os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n    time.sleep(3)\n    # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n    if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n                                 screen_size_list[1]) == 'english':\n        print('当前为英文键盘')\n        input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n                                    screen_size_list[1])\n    else:\n        input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n                                    screen_size_list[1])\n        input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n                                    screen_size_list[1])\n    input_page.tap_menu()\n    keyboard_setting_page = input_page.tap_setting()\n    page_setting_page = keyboard_setting_page.to_page_setting_page()\n    time.sleep(3)\n    page_setting_page.check_number_capitalization('select')\n    # from page.page_setting_page import PageSettingPage\n    page_setting_page.back_to_setting_page().back_to_input_page()\n    os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n    input_page.input_characters(test_case_data['func_01_01_01_0001']['word1'], set_device_id_list[which_driver_pool],\n                                screen_size_list[0], screen_size_list[1])\n    input_page.input_characters('1234567890', set_device_id_list[which_driver_pool],\n                                screen_size_list[0], screen_size_list[1])\n    text = input_page.find_element_by_class(\"android.widget.EditText\").text\n    print(text)\n    assert text == 'qwertyuiopasdfghjklzxcvbnm 1234567890 '\n    input_page.return_to_launcher(set_device_id_list[which_driver_pool])\n\n#\n# @allure.story('检查字符点击与上屏功能[一些符号上屏失败，需调研]')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0003(set_device_id_list, set_driver_pool, cmdopt):\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     # 关闭数字行\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_page_setting_page().check_number_capitalization('noselect')\n#     from page.page_setting_page import PageSettingPage\n#     PageSettingPage(set_driver_pool).back_to_setting_page().back_to_input_page()\n#     time.sleep(2)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     # 进入符号页面\n#     input_page.input_characters('symbol', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     time.sleep(2)\n#     input_page.click_symbol_keyboard('中文')\n#     input_page.click_symbol_keyboard('锁住')\n#     # input_page.click_symbol_keyboard('，。？！、：；……“”‘’@～—＃＊｜（）')\n#     input_page.click_symbol_keyboard('\\u3002')\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print(text)\n#     assert text == '，。？！、：；……“”‘’@～—＃＊｜（）'\n#     # input_page.return_to_launcher(set_device_id_list[which_driver_pool])\n#\n#\n# @allure.story('检查换行键功能')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0006(set_device_id_list, set_driver_pool, cmdopt):\n#     '''\n#         光标换行，有什么好的方法\n#     '''\n#     pass\n#\n#\n# @allure.story('检查空格键功能使用')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0010(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     # 关闭数字行\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_page_setting_page().check_number_capitalization('noselect')\n#     from page.page_setting_page import PageSettingPage\n#     PageSettingPage(set_driver_pool).back_to_setting_page().back_to_input_page()\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.input_characters('nihao', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '你好'\n#\n#\n# @allure.story('切换至符号页')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0014(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     # 进入符号页面\n#     input_page.input_characters('symbol', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     time.sleep(2)\n#     # 判断是否进入符号页面\n#     input_page.is_element_exist('中文')\n#     input_page.is_element_exist('\\u3002')\n#     input_page.click_symbol_keyboard('返回')\n#     # input_page.click_symbol_keyboard('，。？！、：；……“”‘’@～—＃＊｜（）')\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print(text)\n#     assert text == '去'\n#\n#\n# @allure.story('逗号检查')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0053(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     input_page.input_characters(',', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     input_page.long_press(',', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '，！'\n#\n#\n# @allure.story('空格检查')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0054(set_device_id_list, set_driver_pool, cmdopt):\n#     '''\n#         输入状态：目前自己实现的输入逻辑是在输入字母后，自动点击空格，是一个连贯的过程，所以单独的输入状态不好找\n#     '''\n#     pass\n#\n#\n# @allure.story('句号检查')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_01_0055(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     input_page.input_characters('.', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     input_page.long_press('.', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '。？'\n#\n#\n# @allure.story('切换至普通符号页')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_02_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('9键')\n#\n#     # 进入符号页面\n#     input_page.input_characters('symbol', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     time.sleep(2)\n#     # 判断是否进入符号页面\n#     input_page.is_element_exist('中文')\n#     input_page.is_element_exist('\\u3002')\n#     input_page.click_symbol_keyboard('返回')\n#     # input_page.click_symbol_keyboard('，。？！、：；……“”‘’@～—＃＊｜（）')\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print(text)\n#     assert text == '去'\n#     # 还原至26键\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#\n#\n# @allure.story('检查字符点击与上屏功能-英文键盘')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_03_0002(set_device_id_list, set_driver_pool, cmdopt):\n#     '''\n#         疑问细节：分别点击键盘中所有字母和阿拉伯数字键，点击数字键？\n#     '''\n#     pass\n#\n#\n# @allure.story('检查符号点击与上屏功能-26键英文键盘')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_03_0003(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.input_characters('symbol', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     golVar.set_value('language_layout', 'relative_layout_symbol')\n#     input_page.input_characters('@#$%&-+()/:;!?_.', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('asterisk', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('single-quotation', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('quotation', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('symbol', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     golVar.set_value('language_layout', 'relative_layout_en')\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '@#$%&-+()/:;!?_.*\\'\\\"\\\")'\n#\n#\n# @allure.story('手写识别体验')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_04_0010(set_device_id_list, set_driver_pool, cmdopt):\n#     '''\n#         手写how to do？\n#     '''\n#     pass\n#\n#\n# @allure.story('笔画检查')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_05_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('笔画')\n#     time.sleep(2)\n#     input_page.input_characters('一丨丿丶ㄥ通配', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '权'\n#\n#\n# @allure.story('检查26键【?123】功能键显示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_06_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     '''检查符号键样式'''\n#     pass\n#\n#\n# @allure.story('点击【123】功能键盘检查键盘显示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_06_0003(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为中文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     # 手写\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('手写键盘')\n#     time.sleep(3)\n#     input_page.input_characters('num', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     pic_handwriting = input_page.screenshot2('手写-num')\n#     # 笔画\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('笔画')\n#     time.sleep(3)\n#     input_page.input_characters('num', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     pic_bihua = input_page.screenshot2('笔画-num')\n#     # 9键\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('9键')\n#     time.sleep(3)\n#     input_page.input_characters('num', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     pic_9key = input_page.screenshot2('9-num')\n#     # 26键\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#     time.sleep(3)\n#     input_page.input_characters('num', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     pic_26key = input_page.screenshot2('26-num')\n#     result1 = input_page.compare(pic_handwriting, pic_bihua)\n#     result2 = input_page.compare(pic_bihua, pic_9key)\n#     result3 = input_page.compare(pic_9key, pic_26key)\n#     '''\n#         截图比较\n#     '''\n#\n#\n# @allure.story('点击数字键盘任意按键检查字符上屏显示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_06_0009(set_device_id_list, set_driver_pool, cmdopt):\n#     \"\"\"\n#         左侧符号控件的滑动点击\n#     \"\"\"\n#\n#\n# @allure.story('检查符号页面分组显示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_06_0033(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     test_layout_list = ['手写键盘']  # , '笔画', '9键', '26键'\n#     for layout in test_layout_list:\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_layout()\n#         input_page.to_which_keyboard_layout(layout)\n#         input_page.input_characters('symbol', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         first_element_bounds_str = input_page.find_element_by_xpath('//*[@resource-id=\"com.huawei.ohos.inputmethod:id'\n#                                                                     '/symbols_rcv\"]/android.widget.LinearLayout['\n#                                                                     '1]').get_attribute('bounds')\n#         first_element_bounds = re.findall(r'\\d+', first_element_bounds_str)\n#         test_list = ['常用', '中文', '英文', '网络', '特殊', '数学', '序号', '日文', '希腊文', '藏文', '俄文', '拉丁文', '注音', '部首', '制表']\n#         for i in test_list:\n#             input_page.symbol_grouping_bar(i, 'left')\n#             input_page.touch_tap((int(first_element_bounds[0]) + int(first_element_bounds[2])) / 2,\n#                                  (int(first_element_bounds[1]) + int(first_element_bounds[3])) / 2)\n#         input_page.click_symbol_keyboard('返回')\n#\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '，，,@☆+①アαༀаÄā丨╭'\n#     '''\n#         流程能走通，但结果如何去检测？\n#     '''\n#\n#\n# @allure.story('点击语音输入键，语音输入')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_07_0036(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为中文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.clear_sms_data(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#     input_page.voice_input('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                            screen_size_list[1])\n#     os.system('say 你好')\n#     time.sleep(3)\n#     input_page.menu_back()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '你好。'\n#\n#\n# @allure.story('中文九键键盘下显示验证码')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_08_0013(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为中文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     '''\n#         短信验证码相关验证\n#     '''\n#\n#\n# @allure.story('不同APP显示短信验证码-01')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_08_0019(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为中文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     '''\n#         短信验证码相关验证\n#     '''\n#\n#\n# @allure.story('剪贴板内容最多显示5条')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_09_0007(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为中文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'chinese':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.input_characters('nihaozhelishibeijing', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.clean_text()\n#     input_page.tap_menu()\n#     input_page.tap_edit()\n#     operation_list1 = ['句首', '选择', 'right', 'right', '复制']\n#     for operate1 in operation_list1:\n#         input_page.edit_operation(operate1)\n#     operation_list2 = ['选择', 'right', 'right', '复制']\n#     for operate2 in operation_list2:\n#         input_page.edit_operation(operate2)\n#     operation_list3 = ['选择', 'right', '复制']\n#     for operate3 in operation_list3:\n#         input_page.edit_operation(operate3)\n#     operation_list4 = ['选择', 'right', 'right', '复制']\n#     for operate4 in operation_list4:\n#         input_page.edit_operation(operate4)\n#     operation_list5 = ['全选', '复制']\n#     for operate5 in operation_list5:\n#         input_page.edit_operation(operate5)\n#     input_page.menu_back()\n#     input_page.tap_menu()\n#     input_page.tap_clipboard()\n#     num = input_page.get_clipboard_num()\n#     assert num == '(5/5)'\n#     assert not input_page.is_element_exist('使用剪贴板以轻松粘贴文本')\n#\n#\n# @allure.story('点击剪贴板复制内容可上屏')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_09_0009(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_clipboard()\n#     input_page.paste_clipboard_item()\n#\n#\n# @allure.story('点击删除键，此内容消失')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_09_0026(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_clipboard()\n#     str1 = input_page.delete_clipboard_item()\n#     assert str1 == '(0/5)'\n#\n#\n# @allure.story('使用外接键盘输入字符能够正常展示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_12_0005(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     '''\n#         外接键盘\n#     '''\n#\n#\n# @allure.story('使用虚拟键盘输入字符能够正常展示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_12_0006(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     '''\n#         外接键盘\n#     '''\n#\n#\n# @allure.story('切换系统分辨率查看帐号登录状态')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_01_02_0032(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     login_page = input_page.tap_login()\n#     time.sleep(1)\n#     login_page.switch_wm_size(set_device_id_list[which_driver_pool], '800x1760')\n#     time.sleep(1)\n#     # 检验登录状态：1.非登录状态下，页面不存在'登录华为账号'关键字，页面底部没有'退出登录'按钮\n#     # 检验细节：切换分辨率后，各控件点击后，响应是否正常\n#     assert not login_page.is_element_exist('登录华为账号')\n#     assert login_page.is_element_exist('退出登录')\n#     theme_setting_page = login_page.my_skins()\n#     time.sleep(1)\n#     assert theme_setting_page.is_element_exist('皮肤')\n#     theme_setting_page.back_to_previous_page()\n#     font_setting_page = login_page.my_fonts()\n#     time.sleep(1)\n#     assert font_setting_page.is_element_exist('字体')\n#     font_setting_page.back_to_previous_page()\n#     sync_thesaurus_page = login_page.my_sync()\n#     time.sleep(1)\n#     assert sync_thesaurus_page.is_element_exist('同步词库')\n#     sync_thesaurus_page.back_to_previous_page()\n#     back_up_page = login_page.my_back_up()\n#     time.sleep(1)\n#     assert back_up_page.is_element_exist('备份设置项')\n#     back_up_page.back_to_previous_page()\n#     keyboard_setting_page = login_page.to_setting_page()\n#     time.sleep(1)\n#     assert keyboard_setting_page.is_element_exist('小艺输入法')\n#     keyboard_setting_page.back_to_previous_page()\n#     login_page.log_out('取消')\n#     login_page.log_out('继续退出')\n#     time.sleep(3)\n#     assert login_page.is_element_exist('登录华为帐号')\n#     # print('login_page:', login_page.driver.page_source)\n#     login_page.log_in('取消')\n#     login_page.switch_wm_size(set_device_id_list[which_driver_pool], 'reset')\n#     time.sleep(3)\n#     assert not login_page.is_element_exist('登录华为账号')\n#     assert login_page.is_element_exist('退出登录')\n#\n#\n# @allure.story('已登录帐号进入云备份设置页')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_02_01_0004(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     login_page = input_page.tap_login()\n#     time.sleep(1)\n#     login_page.log_out('继续退出')\n#     time.sleep(1)\n#     login_page.log_in('取消')\n#     time.sleep(1)\n#     back_up_page = login_page.my_back_up()\n#     time.sleep(1)\n#     assert back_up_page.is_element_exist('备份设置项')\n#     back_up_page.back_to_previous_page()\n#\n#\n# @allure.story('已登录帐号进入云备份设置页')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_02_01_0017(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     login_page = input_page.tap_login()\n#     back_up_page = login_page.my_back_up()\n#     back_up_page.restore_setting('确定')\n#     back_up_page.back_to_previous_page()\n#\n#\n# @allure.story('手动同步词库图标状态-同步完成01')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_02_02_0013(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     login_page = input_page.tap_login()\n#     sync_thesaurus_page = login_page.my_sync()\n#     time.sleep(1)\n#     sync_thesaurus_page.sync_thesaurus()\n#     current_time = time.strftime(\"%Y-%m-%d %H:%M\", time.localtime(time.time()))\n#     print(current_time)\n#     str_time = sync_thesaurus_page.get_sync_time()\n#     print('str_time:', str_time)\n#     assert current_time == str_time\n#\n#\n# @allure.story('在语音输入页点击Menu进入菜单页')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_01_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0001']['textmessage'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     input_page.bring_up_sms_page()\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.clear_sms_data(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     time.sleep(1)\n#     if input_page.deal_sys_dialog('仅使用期间允许', '仅使用期间允许'):\n#         time.sleep(1)\n#         input_page.bring_up_sms_page()\n#         time.sleep(1)\n#         input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#     input_page.tap_menu()\n#     assert input_page.is_element_exist('键盘布局')\n#     '''\n#     # 切换至横屏\n#     input_page.rotate_the_screen_to_horizontal()\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     '''\n#\n#\n# @allure.story('使用普通话进行语音输入无异常')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_01_0013(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0001']['textmessage'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     input_page.bring_up_sms_page()\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.clear_sms_data(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     time.sleep(1)\n#     input_page.voice_change_language('普通话')\n#     if input_page.deal_sys_dialog('仅使用期间允许', '仅使用期间允许'):\n#         time.sleep(1)\n#         input_page.bring_up_sms_page()\n#         time.sleep(1)\n#         input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#     os.system('say 你好')\n#     text = input_page.find_element_by_id('com.android.mms:id/embedded_text_editor').text\n#     assert text == '你好。'\n#\n#\n# @allure.story('使用粤语普通话免切换方言进行语音输入反馈无异常')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_01_0015(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0001']['textmessage'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     input_page.bring_up_sms_page()\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.clear_sms_data(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     time.sleep(1)\n#     input_page.voice_change_language('粤语')\n#     if input_page.deal_sys_dialog('仅使用期间允许', '仅使用期间允许'):\n#         time.sleep(1)\n#         input_page.bring_up_sms_page()\n#         time.sleep(1)\n#         input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                               screen_size_list[1])\n#\n#     os.system('say -v Sin-ji 你好')\n#     text = input_page.find_element_by_id('com.android.mms:id/embedded_text_editor').text\n#     assert text == '你好。'\n#\n#\n# @allure.story('添加语言确定恢复默认设置，语言页无变化')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0017(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     language_setting_page = keyboard_setting_page.to_language_setting_page()\n#     language_setting_page.add_language_list2('南非荷兰文', 'af')\n#     setting_page = language_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     language_setting_page = setting_page.to_language_setting_page()\n#     status = language_setting_page.check_the_language_states('南非荷兰文')\n#     # 通过语言item勾选状态以此判断是否存在'添加语言'中\n#     assert status == 'true'\n#\n#\n# @allure.story('在普通模式改变皮肤确定恢复默认设置，恢复成默认皮肤')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0022(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     theme_setting_page = keyboard_setting_page.to_theme_setting_page()\n#     theme_setting_page.switch_theme('默认')\n#     theme_setting_page.switch_theme('墨绿色')\n#     theme_setting_page.switch_theme('浅艾蓝')\n#     theme_selected = theme_setting_page.search_selected_theme()\n#     assert theme_selected == '浅艾蓝'\n#     setting_page = theme_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     setting_page.to_theme_setting_page()\n#     theme_selected2 = theme_setting_page.search_selected_theme()\n#     assert theme_selected2 == '默认'\n#\n#\n# @allure.story('非默认字体确定恢复默认设置，字体页无变化')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0026(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     font_setting_page = keyboard_setting_page.to_font_setting_page()\n#     font_data_list = ['系统字体', '鸿蒙字体', 'MidoRound', 'Joker', 'AriaSlab']\n#     font_setting_page.change_font(font_data_list)\n#     font_selected = font_setting_page.search_selected_font()\n#     assert font_selected == 'AriaSlab'\n#     setting_page = font_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     setting_page.to_font_setting_page()\n#     font_selected2 = font_setting_page.search_selected_font()\n#     assert font_selected2 == 'AriaSlab'\n#\n#\n# @allure.story('打开一个模糊拼音选项确定恢复默认设置，选项恢复成默认全部关闭')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0041(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     chinese_setting_page = input_setting_page.click_which_item('中文设置', 'none')\n#     fuzzy_pinyin_test_list = ['z = zh', 'c = ch', 'k = g']\n#     chinese_setting_page.fuzzy_pinyin(fuzzy_pinyin_test_list)\n#     status1 = chinese_setting_page.get_fuzzy_pinyin_status('z = zh')\n#     status2 = chinese_setting_page.get_fuzzy_pinyin_status('c = ch')\n#     status3 = chinese_setting_page.get_fuzzy_pinyin_status('k = g')\n#     assert status1 == 'true'\n#     assert status2 == 'true'\n#     assert status3 == 'true'\n#     # 退出模糊拼音页面\n#     chinese_setting_page.back_to_previous_page()\n#     # 退出中文设置页面\n#     chinese_setting_page.back_to_previous_page()\n#     setting_page = input_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     input_setting_page2 = setting_page.to_input_setting_page()\n#     chinese_setting_page2 = input_setting_page2.click_which_item('中文设置', 'none')\n#     status = chinese_setting_page2.get_all_fuzzy_pinyin_status()\n#     print(type(status), status)\n#     assert status[0] == 10\n#\n#\n# @allure.story('关闭拼音云输入确定恢复默认设置，拼音云输入开关打开')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0045(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     chinese_setting_page = input_setting_page.click_which_item('中文设置', 'none')\n#     chinese_setting_page.chinese_setting_about_input('拼音云输入', '关闭')\n#     chinese_setting_page.back_to_previous_page()\n#     setting_page = input_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     input_setting_page2 = setting_page.to_input_setting_page()\n#     chinese_setting_page2 = input_setting_page2.click_which_item('中文设置', 'none')\n#     status = chinese_setting_page2.get_all_status_in_chinese_setting('拼音云输入')\n#     assert status == '开启'\n#\n#\n# @allure.story('选择非关闭双拼输入选项确定恢复默认设置，选项恢复成默认关闭')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0049(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     chinese_setting_page = input_setting_page.click_which_item('中文设置', 'none')\n#     chinese_setting_page.shuangpin_input('智能ABC')\n#     chinese_setting_page.back_to_previous_page()\n#     setting_page = input_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     input_setting_page2 = setting_page.to_input_setting_page()\n#     chinese_setting_page2 = input_setting_page2.click_which_item('中文设置', 'none')\n#     text = chinese_setting_page2.get_shuangpin_input_text()\n#     assert text == '关闭'\n#\n#\n# @allure.story('关闭启用表情符号预测确定恢复默认设置，启用表情符号预测开关打开')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_02_0065(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.tap_menu()\n#     keyboard_setting_page = input_page.tap_setting()\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     input_setting_page.click_which_item('启用表情符号预测', 'none')\n#     setting_page = input_setting_page.back_to_setting_page()\n#     setting_page.restore_to_default_settings('确定')\n#     input_setting_page2 = setting_page.to_input_setting_page()\n#     status = input_setting_page2.check_item_status('启用表情符号预测')\n#     assert status == 'true'\n#\n#\n# @allure.story('入口-设置')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_03_03_02_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     print('当前键盘：', golVar.get_value('language_layout'))\n#     input_page.return_to_launcher(set_device_id_list[which_driver_pool])\n#     input_page.find_element_by_xpath('//android.widget.TextView[@content-desc=\"小艺输入法\"]').click()\n#     from page.login_page import LoginPage\n#     login_page = LoginPage(set_driver_pool)\n#     setting_page = login_page.to_setting_page()\n#     page_setting_page = setting_page.to_page_setting_page()\n#     change_font_size_page = page_setting_page.change_font_size()\n#     assert change_font_size_page.is_element_exist('字体大小')\n#\n#\n#\n#\n# @allure.story('页面测试')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_InputMethod_SCB_Func_test1(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     setting_page = input_page.tap_setting()\n#     page_setting_page = setting_page.to_page_setting_page()\n#     page_setting_page.button_long_press_delay(0.3, '取消')\n#     page_setting_page.button_long_press_delay(0.01, '取消')\n#     page_setting_page.button_long_press_delay(0.7, '默认')\n#     page_setting_page.button_long_press_delay(0.99, '确定')\n#\n#\n# @allure.story('查看语音长文本模式显示')\n# # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver\n# def test_horizontal_and_vertical_01(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_setting().to_voice_setting_page()\n#     from page.voice_setting_page import VoiceSettingPage\n#     voice_setting_page = VoiceSettingPage(set_driver_pool)\n#     status = voice_setting_page.get_extended_dictation_status()\n#     assert status == 'false'\n#\n#\n# @allure.story('检查首字母大写功能')\n# def test_InputMethod_SCB_Func_01_01_01_0003(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(\n#         test_adb_data['adb_01_01_01_0001']['textmessage'] % set_device_id_list[which_driver_pool])\n#     input_page.find_element_by_id_click('com.google.android.apps.messaging:id/compose_message_text')\n#     # 有的手机首次调起键盘后，可能会弹起'获取联系人权限'的系统弹框\n#     # os.system(test_adb_data['adb_01_01_01_0001']['textmessage'] % set_device_id_list[which_driver_pool])\n#     time.sleep(2)\n#     input_page.find_element_by_id_click(\n#         'com.android.mms:id/embedded_text_editor')  # com.google.android.apps.messaging:id/compose_message_text\n#     if input_page.find_element_by_id('com.android.packageinstaller:id/dialog_container'):\n#         input_page.find_element_by_id_click('com.android.packageinstaller:id/permission_allow_button')\n#         input_page.find_element_by_id_click('com.google.android.apps.messaging:id/compose_message_text')\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.input_characters(test_case_data['func_01_01_01_0003']['word'], set_device_id_list[which_driver_pool],\n#                                 screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_id('com.android.mms:id/embedded_text_editor').text\n#     assert text == 'Qwerty '\n#     input_page.return_to_launcher(set_device_id_list[which_driver_pool])\n#\n#\n# @allure.story('检查大小写切换键功能-大写锁定')\n# def test_InputMethod_SCB_Func_01_01_01_0008(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     pic_before = input_page.screenshot2('pic1')\n#     input_page.input_characters('shift', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     input_page.input_characters('shift', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     pic_after = input_page.screenshot2('pic2')\n#     input_page.input_characters('hello', set_device_id_list[which_driver_pool],\n#                                 screen_size_list[0], screen_size_list[1])\n#     input_page.input_characters(',', set_device_id_list[which_driver_pool], screen_size_list[0], screen_size_list[1])\n#     input_page.input_characters('world', set_device_id_list[which_driver_pool],\n#                                 screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     result = input_page.compare(pic_before, pic_after)\n#     print(result)\n#     print(text)\n#     assert text == 'HELLO ,WORLD '\n#\n#\n# @allure.story('检查按键点击与上屏功能')\n# def test_InputMethod_SCB_Func_01_01_01_0009(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     input_page.input_characters('abcdef', set_device_id_list[which_driver_pool],\n#                                 screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print(text)\n#     assert text == 'abcdef '\n#\n#\n# @allure.story('检查长按弹泡功能')\n# def test_InputMethod_SCB_Func_01_01_01_00010(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     time.sleep(1)\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_page_setting_page().check_bubble_capitalization('noselect')\n#     from page.page_setting_page import PageSettingPage\n#     PageSettingPage(set_driver_pool).back_to_setting_page().back_to_input_page()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     '''\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.uncheck_language_list('中文')\n#     language_setting_page.back_to_previous_page()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     '''\n#     input_page.long_press('qwertyuiopasdfghjklzxcvbnm', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print(text)\n#     assert text == '1234567890@#$%&-+()*\\\"\\':;!?'\n#\n#\n# @allure.story('检查空格键功能使用')\n# def test_InputMethod_SCB_Func_01_01_01_00011(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     input_page.input_characters('hello', set_device_id_list[which_driver_pool],\n#                                 screen_size_list[0], screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print(text)\n#     assert text == 'hello '\n#\n#\n# @allure.story('检查空格键功能使用')\n# def test_InputMethod_SCB_Func_01_01_01_00013(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     input_page.long_press('space', set_device_id_list[which_driver_pool],\n#                           screen_size_list[0], screen_size_list[1])\n#     input_page.deal_sys_dialog('//*[@resource-id=\"com.android.packageinstaller:id/permission_message\"', '允许')\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.long_press('space', set_device_id_list[which_driver_pool],\n#                           screen_size_list[0], screen_size_list[1])\n#     assert input_page.is_element_exist('语言选择按键，双击选择键盘语言') is True\n#     input_page.menu_back()\n#\n#\n# @allure.story('检查句号长按弹泡功能')\n# def test_InputMethod_SCB_Func_01_01_01_00016(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     '''\n#     英文键盘长按，无其他可选符号，是否是版本差异\n#     '''\n#     pass\n#\n#\n# @allure.story('中文键盘检查语言切换键')\n# def test_InputMethod_SCB_Func_01_01_01_00036(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     # 26键点击中/英切换键\n#     # 英文键盘\n#     pic_26_english = input_page.screenshot2('26键英文')\n#     pic_26_english_path = PATH(os.getcwd() + \"/testcase/TestResult/26键英文.png\")\n#     result_26_english = input_page.compare(pic_26_english_path, pic_26_english)\n#     pytest.assume(result_26_english == 0.0)\n#     input_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     pytest.assume(text == 'q ')\n#     # 点击中/英切换键，检查是否为中文键盘\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     pic_26_chinese = input_page.screenshot2('26键中文')\n#     pic_26_chinese_path = PATH(os.getcwd() + \"/testcase/TestResult/26键中文.png\")\n#     result_26_chinese = input_page.compare(pic_26_chinese_path, pic_26_chinese)\n#     pytest.assume(result_26_chinese == 0.0)\n#     input_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     pytest.assume(text == '去')\n#     # 进入键盘布局，切换为 9 键\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('9键')\n#     pic_9 = input_page.screenshot2('9键中文')\n#     pic_9_path = PATH(os.getcwd() + \"/testcase/TestResult/9键中文.png\")\n#     result_9 = input_page.compare(pic_9_path, pic_9)\n#     pytest.assume(result_9 == 0.0)\n#     input_page.input_characters('a', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     pytest.assume(text == '啊')\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     # 使用英文布局\n#     golVar.set_value('language_layout', 'relative_layout_en')\n#     # 切换为英文键盘，清空输入框\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     pytest.assume(text == 'q ')\n#     # 进入键盘布局，切换为笔画\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('笔画')\n#     pic_bihua = input_page.screenshot2('笔画中文')\n#     pic_bihua_path = PATH(os.getcwd() + \"/testcase/TestResult/笔画中文.png\")\n#     result_bihua = input_page.compare(pic_bihua_path, pic_bihua)\n#     pytest.assume(result_bihua == 0.0)\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     golVar.set_value('language_layout', 'relative_layout_en')\n#     # 切换为英文键盘，清空输入框\n#     input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     # 进入键盘布局，切换为手写\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('手写键盘')\n#     pic_shouxie = input_page.screenshot2('手写中文')\n#     pic_shouxie_path = PATH(os.getcwd() + \"/testcase/TestResult/手写中文.png\")\n#     result_shouxie = input_page.compare(pic_shouxie_path, pic_shouxie)\n#     pytest.assume(result_shouxie == 0.0)\n#     # 切换为英文键盘，清空输入框\n#     # 进入语言添加页面，添加语言\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     golVar.set_value('language_layout', 'relative_layout_en')\n#     input_page.language_picker_list('更多语言...')\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.add_language_list2('中文', 'zh_HK')\n#     language_setting_page.add_language_list2('中文', 'zh_TW')\n#     language_setting_page.back_to_previous_page()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     golVar.set_value('language_layout', '注音')\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     # 添加注音键盘\n#     input_page.language_picker_list('中文（注音）')\n#     pic_zhuyin = input_page.screenshot2('注音中文')\n#     pic_zhuyin_path = PATH(os.getcwd() + \"/testcase/TestResult/注音中文.png\")\n#     result_zhuyin = input_page.compare(pic_zhuyin_path, pic_zhuyin)\n#     pytest.assume(result_zhuyin == 0.0)\n#     # 添加仓颉键盘\n#     # golVar.set_value('language_layout', '仓颉')\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('中文（倉頡）')\n#     pic_cangjie = input_page.screenshot2('倉頡中文')\n#     pic_cangjie_path = PATH(os.getcwd() + \"/testcase/TestResult/倉頡中文.png\")\n#     result_cangjie = input_page.compare(pic_cangjie_path, pic_cangjie)\n#     pytest.assume(result_cangjie == 0.0)\n#\n#\n# @allure.story('单手键盘初始状态和基础功能检查')\n# def test_InputMethod_SCB_Func_01_02_0003(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 清除输入法数据\n#     os.system('adb -s %s shell pm clear com.huawei.ohos.inputmethod' % set_device_id_list[which_driver_pool])\n#     input_page.set_default_inputmethod('ziyan')\n#     time.sleep(3)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     input_page.deal_gdpr_informal()\n#     time.sleep(2)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('单手模式')\n#     input_page.switch_keyboard_to_opposite()\n#     input_page.return_to_normal()\n#\n#\n# @allure.story('检查悬浮键盘模式各功能使用')\n# def test_InputMethod_SCB_Func_01_03_0010(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     # 进入悬浮键盘模式\n#     input_page.to_which_keyboard_mode('悬浮键盘')\n#     time.sleep(2)\n#     # 依次按上、左、右、下 4 个方向移动悬浮键盘\n#     input_page.float_to_move('up', 100)\n#     input_page.float_to_move('left', 100)\n#     input_page.float_to_move('right', 100)\n#     input_page.float_to_move('down', 100)\n#     # 隐藏键盘后再调起键盘\n#     input_page.menu_back()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     # 点击 menu\n#     input_page.tap_menu()\n#     # 切换键盘布局：手写键盘、9键、笔画、26键\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('手写键盘')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('9键')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('笔画')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#     # 点击进入主题，改变主题，换第一套然后回到输入页面\n#     input_page.tap_menu()\n#     input_page.change_theme().switch_them1()\n#     from page.theme_setting_page import ThemeSettingPage\n#     ThemeSettingPage(set_driver_pool).back_to_previous_page()\n#     ThemeSettingPage(set_driver_pool).back_to_previous_page()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     # 编辑键盘，改动大小\n#\n#     input_page.tap_menu()\n#     input_page.tap_adjust_size()\n#     input_page.adjust_size('a', 'up', 100, screen_size_list[0], screen_size_list[1])\n#     input_page.adjust_size('b', 'down', 100, screen_size_list[0], screen_size_list[1])\n#     input_page.adjust_size('c', 'left', 100, screen_size_list[0], screen_size_list[1])\n#     input_page.adjust_size('d', 'right', 100, screen_size_list[0], screen_size_list[1])\n#     input_page.float_finish_resize()\n#     # 编辑键盘恢复默认大小\n#     input_page.tap_menu()\n#     input_page.tap_adjust_size()\n#     input_page.float_restore_default()\n#     # 点击剪切板，粘贴第一条内容\n#     input_page.tap_menu()\n#     input_page.tap_clipboard()\n#     input_page.clipboard_func(1, '粘贴')\n#     input_page.menu_back()\n#     # 点击编辑按钮，并进行相关操作\n#     input_page.tap_menu()\n#     input_page.tap_edit()\n#     input_page.edit_operation('全选')\n#     input_page.edit_operation('剪切')\n#     input_page.edit_operation('粘贴')\n#     input_page.edit_operation('句首')\n#     input_page.edit_operation('句尾')\n#     input_page.edit_operation('句首')\n#     input_page.edit_operation('选择')\n#     input_page.edit_operation('right')\n#     input_page.edit_operation('复制')\n#     input_page.edit_operation('粘贴')\n#     input_page.edit_operation('删除')\n#     input_page.edit_operation('回车')\n#     input_page.edit_operation('剪切板')\n#     input_page.clipboard_func(1, '粘贴')\n#     input_page.menu_back()\n#     # 声音振动调节\n#     input_page.tap_menu()\n#     input_page.tap_sound_vibration()\n#     input_page.adjust_vibration(1)\n#     input_page.adjust_vibration(0.5)\n#     input_page.adjust_vibration(0.01)\n#     input_page.adjust_sound(1)\n#     input_page.adjust_sound(0.5)\n#     input_page.adjust_sound(0.01)\n#     input_page.enter_keyboard_sound_page()\n#     from page.sound_effect_page import SoundEffectPage\n#     SoundEffectPage(set_driver_pool).switch_sound9().back_to_previous_page()\n#     SoundEffectPage(set_driver_pool).back_to_previous_page()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     time.sleep(2)\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).back_to_previous_page()\n#\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.float_to_normal()\n#\n#\n# @allure.story('检查键盘初始状态和基础功能')\n# def test_InputMethod_SCB_Func_01_04_0002(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 清除输入法数据\n#     os.system('adb -s %s shell pm clear com.huawei.ohos.inputmethod' % set_device_id_list[which_driver_pool])\n#     input_page.set_default_inputmethod('ziyan')\n#     time.sleep(5)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.deal_gdpr_informal()\n#     time.sleep(5)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('拇指模式')\n#     pic_muzhi = PATH(os.getcwd() + \"/testcase/TestResult/拇指键盘.png\")\n#     pic = input_page.screenshot2('拇指键盘')\n#     result = input_page.compare(pic_muzhi, pic)\n#     assert result == 0.0\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('普通键盘')\n#\n#\n# @allure.story('使用外接键盘输入字符能够正常展示')\n# def test_InputMethod_SCB_Func_01_05_0005(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     '''\n#         外界键盘？？？\n#     '''\n#\n#\n# @allure.story('显示一元联想词语言确认')\n# def test_InputMethod_SCB_Func_01_05_0034(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     '''\n#             外接键盘？？？\n#     '''\n#\n#\n# @allure.story('简体中文支持手写键盘')\n# def test_InputMethod_SCB_Func_01_07_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#     else:\n#         print('当前为中文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('手写键盘')\n#     pic_muzhi = PATH(os.getcwd() + \"/testcase/TestResult/手写中文.png\")\n#     pic = input_page.screenshot2('手写键盘')\n#     result = input_page.compare(pic_muzhi, pic)\n#     assert result == 0.0\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('26键')\n#\n#\n# @allure.story('麦克风权限默认禁止')\n# def test_InputMethod_SCB_Func_01_08_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     # 进入华为手机系统设置页面\n#     os.system('adb -s %s shell am start com.android.settings/.HWSettings' %\n#               set_device_id_list[which_driver_pool])\n#     from page.base_page import BasePage\n#     base_page = BasePage(set_driver_pool)\n#     # 点击'设置'中的应用\n#     base_page.scroll_syspage_to_find('//*[@resource-id=\"com.android.settings:id/main_content\"]', '应用')\n#     # 点击应用页面中的应用管理\n#     base_page.click_syspage_app_management()\n#     # 寻找应用管理页面中的'小艺输入法'\n#     base_page.scroll_syspage_to_find('//*[@resource-id=\"android:id/list\"]', '小艺输入法')\n#     # 点击'权限'\n#     base_page.click_syspage_app_info()\n#     # 若已禁止，则授予麦克风权限\n#     if base_page.is_element_exist('已禁止'):\n#         assert base_page.is_element_exist('麦克风')\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     assert input_page.is_element_exist('禁止')\n#\n#\n# @allure.story('点击设置，允许麦克风权限，进入语音键盘')\n# def test_InputMethod_SCB_Func_01_08_0005(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.find_element_by_text_click('禁止后不再提示')\n#     # 进入华为手机系统设置页面\n#     os.system('adb -s %s shell am start com.android.settings/.HWSettings' %\n#               set_device_id_list[which_driver_pool])\n#     from page.base_page import BasePage\n#     base_page = BasePage(set_driver_pool)\n#     # 点击'设置'中的应用\n#     base_page.scroll_syspage_to_find('//*[@resource-id=\"com.android.settings:id/main_content\"]', '应用')\n#     # 点击应用页面中的应用管理\n#     base_page.click_syspage_app_management()\n#     # 寻找应用管理页面中的'小艺输入法'\n#     base_page.scroll_syspage_to_find('//*[@resource-id=\"android:id/list\"]', '小艺输入法')\n#     # 点击'权限'\n#     base_page.click_syspage_app_info()\n#     # 若已禁止，则授予麦克风权限\n#     if base_page.is_element_exist('已禁止'):\n#         base_page.click_syspage_universal('麦克风')\n#         base_page.click_syspage_universal('仅使用期间允许')\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     # 通过语音页面中的控件'语言选择按键，双击选择键盘语言'判断当前页面是否是语音属入页面\n#     assert input_page.is_element_exist('语言选择按键，双击选择键盘语言')\n#\n#\n# @allure.story('语音功能入口')\n# def test_InputMethod_SCB_Func_01_08_0006(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     '''\n#         此处需改为华为短信页面\n#     '''\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 长按空格调出语音输入界面\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.deal_sys_dialog('要允许小艺输入法录制音频吗？', '允许')\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.long_press('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     pic_yuyin = PATH(os.getcwd() + \"/testcase/TestResult/语音界面.png\")\n#     pic = input_page.screenshot2('语音界面')\n#     result = input_page.compare(pic_yuyin, pic)\n#     assert result < 2\n#\n#\n# @allure.story('输入emoji，无异常')\n# def test_InputMethod_SCB_Func_01_09_0002(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.input_characters('emjo', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     time.sleep(3)\n#     input_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     print('text:', text)\n#     assert text == '\uD83D\uDE00'\n#\n#\n# @allure.story('使用编辑键盘时，键盘功能全部置灰')\n# def test_InputMethod_SCB_Func_02_02_02_0003(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_adjust_size()\n#     pic_bianji = PATH(os.getcwd() + \"/testcase/TestResult/编辑键盘.png\")\n#     pic = input_page.screenshot2('编辑键盘')\n#     result = input_page.compare(pic_bianji, pic)\n#     assert result < 2\n#\n#\n# @allure.story('删除只有一种键盘布局的语言，该语言重新展示在可用语言列表中')\n# def test_InputMethod_SCB_Func_03_01_01_0002(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     time.sleep(1)\n#     input_page.tap_setting()\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_language_setting_page()\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.open_input_menu_search('阿斯图里亚斯文')\n#     language_num_1 = language_setting_page.get_list_total_num('//android.widget.ExpandableListView/android'\n#                                                               '.widget.LinearLayout')\n#     language_setting_page.uncheck_language_list('阿斯图里亚斯文')\n#     if language_setting_page.check_the_language_states('阿斯图里亚斯文') == 'false':\n#         print('取消：', language_setting_page.is_element_exist('删除语言按键，双击删除 阿斯图里亚斯文 语言'))\n#         assert language_setting_page.is_element_exist('删除语言按键，双击删除 阿斯图里亚斯文 语言')\n#     time.sleep(1)\n#     language_setting_page.delete_language('阿斯图里亚斯文')\n#     language_num_2 = language_setting_page.get_list_total_num('//android.widget.ExpandableListView/android'\n#                                                               '.widget.LinearLayout')\n#     print('num: ', int(language_num_1) - int(language_num_2))\n#     assert int(language_num_1) - int(language_num_2) == 1\n#     # language_setting_page.add_language_list2('阿斯图里亚斯文', 'ast')\n#\n#     # language_setting_page.return_to_launcher()\n#\n#\n# @allure.story('进入语言页-键盘长按地球键')\n# def test_InputMethod_SCB_Func_03_01_01_0010(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     assert language_setting_page.is_element_exist('语言')\n#     # language_setting_page.return_to_launcher()\n#\n#\n# @allure.story('进入语言页-键盘点击Menu')\n# def test_InputMethod_SCB_Func_03_01_01_0011(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_language_setting_page()\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     assert language_setting_page.is_element_exist('语言')\n#     # language_setting_page.return_to_launcher()\n#\n#\n# @allure.story('进入语言页-点击输入法桌面icon')\n# def test_InputMethod_SCB_Func_03_01_01_0012(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0008']['ohos'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_language_setting_page()\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     assert language_setting_page.is_element_exist('语言')\n#     # language_setting_page.return_to_launcher()\n#\n#\n# @allure.story('切换系统语言-系统语言需添加马来语')\n# def test_InputMethod_SCB_Func_03_01_01_0013(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     os.system(test_adb_data['adb_01_01_01_0009']['language_setting'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.to_system_language_picker('语言和地区', '马来文')\n#     time.sleep(3)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('Lebih banyak bahasa...')\n#     time.sleep(1)\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     # 判断马来西亚语有勾选状态，以此来判断马来西亚语已添加至【添加语言】列表中\n#     assert language_setting_page.check_the_language_states('Bahasa Melayu (Malaysia)')\n#     os.system(test_adb_data['adb_01_01_01_0009']['language_setting'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 还原系统语言至中文\n#     input_page.to_system_language_picker('Bahasa dan kawasan', 'Cina Ringkas')\n#\n#\n# @allure.story('添加语言-同意隐私声明-连接WiFi')\n# def test_InputMethod_SCB_Func_03_01_01_0015(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     time.sleep(3)\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     # 添加南非荷兰语前，'添加语言'列表中 item 的数目\n#     before_add_language = language_setting_page.get_list_total_num('//android.widget.ExpandableListView/android'\n#                                                                    '.widget.LinearLayout')\n#     if language_setting_page.is_element_exist('添加语言按键，双击添加 南非荷兰文 语言'):\n#         language_setting_page.add_language_list2('南非荷兰文', 'af')\n#     time.sleep(3)\n#     # 添加南非荷兰语后，'添加语言'列表中 item 的数目，如果添加后的语言数目-添加前的语言数目=1，说明语言添加成功，在'添加语言'列表中\n#     after_add_language = language_setting_page.get_list_total_num('//android.widget.ExpandableListView/android.widget'\n#                                                                   '.LinearLayout')\n#     if int(after_add_language) - int(before_add_language) == 1:\n#         assert language_setting_page.check_the_language_states('南非荷兰文') == 'true'\n#         language_setting_page.back_to_previous_page()\n#         os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#         afrikaans_keyboard = PATH(os.getcwd() + \"/testcase/TestResult/南非键盘.png\")\n#         pic = input_page.screenshot2('南非键盘')\n#         result = input_page.compare(afrikaans_keyboard, pic)\n#         assert result < 2\n#\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('中文')\n#\n#\n# @allure.story('语言布局切换')\n# def test_InputMethod_SCB_Func_03_01_01_0025(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     time.sleep(3)\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.updata_layout2('英语 (美国)', 2)\n#     time.sleep(1)\n#     language_setting_page.back_to_previous_page()\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.input_characters('qwerty', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == 'qwertz '\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.screenshot_universal('layout', 2)\n#     # input_page.return_to_launcher()\n#\n#\n# @allure.story('存在多个已添加语言-停用单个语言')\n# def test_InputMethod_SCB_Func_03_01_01_0046(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     time.sleep(3)\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.uncheck_language_list('英语 (美国)')\n#     time.sleep(1)\n#     states = language_setting_page.check_the_language_states('英语 (美国)')\n#     assert states == 'false'\n#     time.sleep(1)\n#     language_setting_page.is_element_exist('//android.widget.ImageView[@content-desc=\"删除语言按键，双击删除 %s 语言\"]'\n#                                            % '英语 (美国)')\n#     time.sleep(1)\n#     language_setting_page.back_to_previous_page()\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     assert input_page.is_element_exist('英语 (美国)') is False\n#\n#\n# @allure.story('【添加语言】中被勾选语言<5-添加语言')\n# def test_InputMethod_SCB_Func_03_01_01_0053(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     time.sleep(3)\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.add_language_list2('德语', 'de')\n#     states = language_setting_page.check_the_language_states('德语')\n#     assert states == 'true'\n#\n#\n# @allure.story('【添加语言】中被勾选语言<5-启用单个语言')\n# def test_InputMethod_SCB_Func_03_01_01_0051(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.language_picker_list('更多语言...')\n#     time.sleep(3)\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.add_language_list2('西班牙语', 'es')\n#     language_setting_page.add_language_list2('法语', 'fr')\n#     language_setting_page.add_language_list2('俄语', 'ru')\n#     language_setting_page.uncheck_language_list('西班牙语')\n#     language_setting_page.uncheck_language_list('法语')\n#     language_setting_page.uncheck_language_list('俄语')\n#     # uncheck_language_list方法其实是点击checkbox，未选中时，点击则显示选中状态\n#     language_setting_page.uncheck_language_list('德语')\n#     assert language_setting_page.check_the_language_states('德语') == 'true'\n#     time.sleep(1)\n#     language_setting_page.back_to_previous_page()\n#     input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                           screen_size_list[1])\n#     input_page.is_element_exist('德语') is True\n#\n#\n# @allure.story('检查语言列表搜索入口')\n# def test_InputMethod_SCB_Func_03_01_02_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     # 通过命令的方式启动输入法\n#     os.system(test_adb_data['adb_01_01_01_0008']['ohos'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_language_setting_page()\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.click_input_menu_search()\n#     # 检查搜索框中是否出现'Search'文案，与清空按钮\n#     if language_setting_page.is_element_exist('Search'):\n#         if language_setting_page.is_element_exist('清空按键，双击清空搜索框内容'):\n#             language_setting_page.input_characters('q', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                                    screen_size_list[1])\n#             text = language_setting_page.find_element_by_class(\"android.widget.EditText\").text\n#             assert text == '去'\n#\n#\n# @allure.story('检查搜索语言逻辑及功能')\n# def test_InputMethod_SCB_Func_03_01_02_0006(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     KeyboardSettingPage(set_driver_pool).to_language_setting_page()\n#     from page.language_setting_page import LanguageSettingPage\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.click_input_menu_search()\n#     # 检查搜索框中是否出现'Search'文案，与清空按钮\n#     if language_setting_page.is_element_exist('Search'):\n#         if language_setting_page.is_element_exist('清空按键，双击清空搜索框内容'):\n#             input_page = InputPage(set_driver_pool)\n#             input_page.long_press('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                   screen_size_list[1])\n#             input_page.language_picker_list('English(United States)')\n#             input_page.input_characters('p', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             # 目的：点击 back 键，收起键盘\n#             # input_page.back_to_previous_page()\n#             # text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#             if language_setting_page.is_element_exist('Polski') is not True:\n#                 print('当前页面不含Polski')\n#             input_page.input_characters('olski', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             if language_setting_page.is_element_exist('Polski') is True:\n#                 print('当前页面含有Polski')\n#             # input_page.return_to_launcher()\n#\n#\n# @allure.story('emoji候选展示')\n# def test_InputMethod_SCB_Func_03_05_01_0001(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     keyboard_setting_page = KeyboardSettingPage(set_driver_pool)\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     if input_setting_page.check_item_status('启用表情符号预测') is not True:\n#         input_setting_page.click_which_item('启用表情符号预测')\n#     input_setting_page.back_to_previous_page()\n#     keyboard_setting_page.back_to_previous_page()\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.input_characters('apple', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     input_page.click_which_candidate(3)\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     assert text == '#127822;'\n#\n#\n# @allure.story('快速插入联想词输入检查02')\n# def test_InputMethod_SCB_Func_03_05_02_0015(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     # 检查键盘，非中文键盘，点击'切换'键，切换为英文键盘，检查完后点击enter清空文本框内容，再进行输入\n#     if input_page.check_language(set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                  screen_size_list[1]) == 'english':\n#         print('当前为英文键盘')\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     else:\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#     input_page.tap_menu()\n#     input_page.tap_setting()\n#     from page.keyboard_setting_page import KeyboardSettingPage\n#     keyboard_setting_page = KeyboardSettingPage(set_driver_pool)\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     if input_setting_page.check_item_status('快速插入联想词') is not True:\n#         input_setting_page.click_which_item('快速插入联想词')\n#     input_setting_page.back_to_previous_page()\n#     keyboard_setting_page.back_to_previous_page()\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     input_page.input_characters('test', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     # 获取 top1 的候选词\n#     top_1 = input_page.find_candidate(2)\n#     input_page.input_characters('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text = input_page.find_element_by_class(\"android.widget.EditText\").text\n#     # 查询 top1 的词是否在上屏的 text 中，如果在，则说明 test 上屏后，点击空格候选词也自动上屏\n#     assert top_1 in text\n#\n#\n# @allure.story('应用支持URL快捷键')\n# def test_InputMethod_SCB_Func_03_05_02_0015(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     # os.system(test_adb_data['adb_01_01_01_0010']['opera_browser'] % set_device_id_list[which_driver_pool])\n#     # time.sleep(1)\n#     # input_page.click_browser_search_box('Opera')\n#     # time.sleep(2)\n#     os.system(test_adb_data['adb_01_01_01_0011']['chrome_browser'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     input_page.click_browser_search_box('Chrome')\n#     time.sleep(3)\n#     if input_page.is_element_exist('com.huawei.ohos.inputmethod:id/extra_container_top'):\n#         pic = input_page.screenshot_urlboard('url')\n#         url_keyboard = PATH(os.getcwd() + \"/testcase/TestResult/url.png\")\n#         result = input_page.compare(url_keyboard, pic)\n#         assert result < 2\n#     input_page.click_url('url_www')\n#     input_page.click_url('url_point')\n#     input_page.click_url('url_slash')\n#     input_page.click_url('url_com')\n#     text = input_page.find_url_text('Chrome')\n#     assert text == 'www../.com\u200B'\n#     input_page.click_url('left_layout')\n#     input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text2 = input_page.find_url_text('Chrome')\n#     assert text2 == 'www../.cm\u200B'\n#     input_page.click_url('right_layout')\n#     input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                 screen_size_list[1])\n#     text3 = input_page.find_url_text('Chrome')\n#     assert text3 == 'www../.c'\n#     # os.system(test_adb_data['adb_01_01_01_0012']['microsoft_browser'] % set_device_id_list[which_driver_pool])\n#     # time.sleep(2)\n#     # input_page.click_browser_search_box('MicroSoft')\n#     # time.sleep(2)\n#     # os.system(test_adb_data['adb_01_01_01_0013']['via_browser'] % set_device_id_list[which_driver_pool])\n#     # time.sleep(1)\n#     # input_page.click_browser_search_box('Via')\n#     # time.sleep(2)\n#     # os.system(test_adb_data['adb_01_01_01_0014']['firefox_browser'] % set_device_id_list[which_driver_pool])\n#     # time.sleep(1)\n#     # input_page.click_browser_search_box('FireFox')\n#     # time.sleep(2)\n#\n#\n# @allure.story('test')\n# def test_InputMethod_SCB_Func_test(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     input_page.to_which_keyboard_layout('手写键盘')\n#     time.sleep(2)\n#     # input_page.write_words()\n#     input_page.write_words()\n#\n#\n# @allure.story('打点测试，遍历 30 种键盘')\n# def test_30(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0008']['ohos'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     keyboard_setting_page = KeyboardSettingPage(set_driver_pool)\n#     input_setting_page = keyboard_setting_page.to_input_setting_page()\n#     input_setting_page.click_which_item('快速插入联想词')\n#     input_setting_page.back_to_previous_page()\n#     keyboard_setting_page.to_language_setting_page()\n#     language_setting_page = LanguageSettingPage(set_driver_pool)\n#     language_setting_page.add_language_list2('马来文 (马来西亚)', 'ms_my')\n#     language_setting_page.add_language_list2('德文', 'de')\n#     language_setting_page.add_language_list2('英文 (澳大利亚)', 'en_AU')\n#     language_setting_page.add_language_list2('英文 (加拿大)', 'en_CA')\n#     language_setting_page.add_language_list2('英文 (英国)', 'en_GB')\n#     language_setting_page.add_language_list2('西班牙文', 'es')\n#     language_setting_page.add_language_list2('西班牙文（拉丁美洲）', 'es_la')\n#     # language_setting_page.add_language_list2('西班牙文 (美国)', 'es_us')\n#     language_setting_page.add_language_list2('西班牙文 (墨西哥)', 'es_mx')\n#     language_setting_page.add_language_list2('法文', 'fr')\n#     language_setting_page.add_language_list2('法文 (加拿大)', 'fr_ca')\n#     language_setting_page.add_language_list2('印度尼西亚文', 'id')\n#     language_setting_page.add_language_list2('意大利文', 'it')\n#     language_setting_page.add_language_list2('波兰语', 'pl')\n#     language_setting_page.add_language_list2('葡萄牙文 (巴西)', 'pt_br')\n#     language_setting_page.add_language_list2('葡萄牙文 (葡萄牙)', 'pt_pt')\n#     language_setting_page.add_language_list2('土耳其文', 'tr')\n#     language_setting_page.add_language_list2('捷克文', 'cs')\n#     language_setting_page.add_language_list2('俄文', 'ru')\n#     # language_setting_page.add_language_list2('乌尔都文', 'ur')\n#     language_setting_page.add_language_list2('阿拉伯文', 'ar')\n#     language_setting_page.add_language_list2('阿拉伯文 (阿尔及利亚)', 'ar_ar')\n#     language_setting_page.add_language_list2('阿拉伯文(黎凡特)', 'ar_li')\n#     language_setting_page.add_language_list2('阿拉伯文 (摩洛哥)', 'ar_mo')\n#     language_setting_page.add_language_list2('阿拉伯文 (沙特阿拉伯)', 'ar_sa')\n#     language_setting_page.add_language_list2('阿拉伯文 (突尼斯)', 'ar_tu')\n#     language_setting_page.add_language_list2('阿拉伯文 (埃及)', 'ar_eg')\n#     language_setting_page.add_language_list2('印地文', 'hi')\n#     language_setting_page.add_language_list2('泰文', 'th')\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     # 拉起键盘\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#\n#     input_page = InputPage(set_driver_pool)\n#     input_page.deal_sys_dialog('通讯录', '允许')\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     language_list = ['ไทย', 'हिन्दी', 'العربية (مصر)', 'العربية (تونس)', 'العربية (المملكة العربية السعودية)',\n#                      'العربية (المغرب)', 'العربية (الشرق)\u200E', 'العربية (الجزائر)', 'العربية', 'Русский',\n#                      'Čeština', 'Türkçe', 'Português (Portugal)', 'Português (Brasil)', 'Polski', 'Melayu (Malaysia)',\n#                      'Italiano', 'Indonesia', 'Français (Canada)', 'Français', 'Español(México)',\n#                      'Español(América Latina)', 'Español', 'English(United States)',\n#                      'English(United Kingdom)', 'English(Canada)', 'English(Australia)', 'Deutsch']\n#     # language_list = ['हिन्दी', 'العربية (مصر)', 'Deutsch']\n#     for language in language_list:\n#         # if language in ['العربية (مصر)', 'العربية (تونس)', 'العربية (المملكة العربية السعودية)',\n#         #              'العربية (المغرب)', 'العربية (الشرق)\u200E', 'العربية (الجزائر)', 'العربية', 'اردو']:\n#         # 点击语言键\n#\n#         input_page.input_characters('switch', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         print('abc')\n#         time.sleep(1)\n#         input_page.language_picker_list(language)\n#         os.system('adb shell input tap 540 1800')\n#         os.system('adb shell input tap 540 1800')\n#         # 点击删除键\n#         input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         # 点击空格键\n#         input_page.input_characters('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         os.system('adb shell input tap 540 1800')\n#         # 点击回车键\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#         input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                     screen_size_list[1])\n#\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_mode()\n#         input_page.to_which_keyboard_mode('单手模式')\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_mode()\n#         input_page.to_which_keyboard_mode('悬浮键盘')\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_mode()\n#         input_page.to_which_keyboard_mode('拇指模式')\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_mode()\n#         input_page.to_which_keyboard_mode('编辑键盘')\n#         input_page.float_restore_default()\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_mode()\n#         input_page.to_which_keyboard_mode('普通键盘')\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_layout()\n#         list_num = input_page.get_list_total_num('//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view'\n#                                                  '\"]/android.widget.LinearLayout')\n#         for i in range(1, list_num):\n#             text = input_page.find_element_by_xpath(\n#                 '//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view\"]/android.widget.LinearLayout['\n#                 '%d]/android.widget.TextView' % (\n#                         1 + i)).get_attribute('text')\n#             if text == 'Dvorak':\n#                 golVar.set_value('language_layout', 'relative_layout_dvorak')\n#             else:\n#                 golVar.set_value('language_layout', 'relative_layout_en')\n#             input_page.find_element_by_xpath_click('//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view'\n#                                                    '\"]/android.widget.LinearLayout[%d]' % (1 + i))\n#             time.sleep(1)\n#             os.system('adb shell input tap 540 1800')\n#             os.system('adb shell input tap 540 1800')\n#             # 点击删除键\n#             input_page.input_characters('delete', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             # 点击空格键\n#             input_page.input_characters('space', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             os.system('adb shell input tap 540 1800')\n#             # 点击回车键\n#             input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             input_page.input_characters('enter', set_device_id_list[which_driver_pool], screen_size_list[0],\n#                                         screen_size_list[1])\n#             input_page.tap_menu()\n#             input_page.tap_keyboard_layout()\n#         input_page.find_element_by_xpath_click(\n#             '//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view\"]/android.widget.LinearLayout[1]')\n#     # 收起键盘\n#     input_page.menu_back()\n#\n#\n# @allure.story('打点测试，遍历 30 种键盘')\n# def test_31(set_device_id_list, set_driver_pool, cmdopt):\n#     set_device_id_list = set_device_id_list\n#     # pool 池中 driver 与 device_id 为一对一的关系\n#     which_driver_pool = int(cmdopt)\n#     input_page = InputPage(set_driver_pool)\n#     screen_size_list.clear()\n#     get_vm_size(set_device_id_list[which_driver_pool], screen_size_list)\n#     os.system(test_adb_data['adb_01_01_01_0003']['emptyinput'] % set_device_id_list[which_driver_pool])\n#     time.sleep(1)\n#     os.system(test_adb_data['adb_01_01_01_0004']['upkeyboard'] % set_device_id_list[which_driver_pool])\n#     time.sleep(3)\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('单手模式')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('悬浮键盘')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('拇指模式')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('编辑键盘')\n#     input_page.float_restore_default()\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_mode()\n#     input_page.to_which_keyboard_mode('普通键盘')\n#     input_page.tap_menu()\n#     input_page.tap_keyboard_layout()\n#     list_num = input_page.get_list_total_num(\n#         '//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view\"]/android.widget.LinearLayout')\n#     print('list_num:', list_num)\n#     for i in range(1, list_num):\n#         text = input_page.find_element_by_xpath(\n#             '//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view\"]/android.widget.LinearLayout[%d]/android.widget.TextView' % (\n#                     1 + i)).get_attribute('text')\n#         print(text)\n#         input_page.find_element_by_xpath_click(\n#             '//*[@resource-id=\"com.huawei.ohos.inputmethod:id/recycler_view\"]/android.widget.LinearLayout[%d]' % (\n#                     1 + i))\n#\n#         input_page.tap_menu()\n#         input_page.tap_keyboard_layout()\n\n\nif __name__ == '__main__':\n    golVar.__init__()\n    pytest.main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/case/TestCase2.py b/case/TestCase2.py
--- a/case/TestCase2.py	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/case/TestCase2.py	(date 1640938475252)
@@ -16,7 +16,7 @@
 
 '''
 生成allure报告 2 步：
-1、python3 -m pytest testcase/TestCase.py --alluredir report/allure_raw --clean-alluredir
+1、python3 -m pytest testcase/TestCase2.py --alluredir report/allure_raw --clean-alluredir
 2、allure generate report/allure_raw -o report/html --clean
 '''
 
@@ -41,6 +41,7 @@
 # 通过 case_number 在 case_id 表中查询，对应的 case 使用哪个 driver
 def test_InputMethod_SCB_Func_01_01_0002(set_device_id_list, set_driver_pool, cmdopt):
     # pool 池中 driver 与 device_id 为一对一的关系
+    print(cmdopt,'打印一窜海上繁花')
     which_driver_pool = int(cmdopt)
     driver = set_driver_pool[which_driver_pool]
     input_page = InputPage(driver)
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport pytest\nimport golVar\nimport xlrd\nfrom multiprocessing.pool import Pool\n\n\ncase_id_data_path = os.path.dirname(os.path.abspath(__file__)) + '/case_id.xlsx'\n\ndef case_data():\n    wb = xlrd.open_workbook(filename=case_id_data_path)\n    sheet1 = wb.sheet_by_index(0)\n    case_id = sheet1.col_values(0)\n    pool_id = sheet1.col_values(1)\n    case_id.pop(0)\n    pool_id.pop(0)\n    print('case_id', case_id)\n    print('pool_id', pool_id)\n    return case_id, pool_id\n\n\ndef execute_cmd(case_id, device_num):\n    # os.popen('pwd'testcase/)\n    os.system('python3 -m pytest -s -v %s --cmdopt %d' % (case_id, device_num))\n\n\ndef multi_device_operation():\n    golVar.__init__()\n    '''\n        目前 case 分发逻辑：按照 case_pool 去分发测试任务，case_pool 列表中只有一个 case 文件，意味着该文件只能由一个设备测试，如需要\n        2 台，甚至 3 台进行同步测试，则需将原 case 文件分为 3 份：TestCase1.py、TestCase2.py、TestCase3.py 放入 case_pool 列表中，\n        每台设备跑对应文件的测试 case\n    '''\n    case_pool = ['TestCase2.py', 'TestCase3.py']\n    device_num = [0, 1]\n    # which_case = case_data()\n    p = Pool(len(case_pool))\n    for i in range(len(case_pool)):\n        p.apply_async(execute_cmd, args=(case_pool[i], device_num[i]),)\n    p.close()\n    p.join()\n\n\nif __name__ == '__main__':\n    # multi_device_operation()\n    pytest.main()\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/main.py	(date 1640938475255)
@@ -3,8 +3,6 @@
 import golVar
 import xlrd
 from multiprocessing.pool import Pool
-
-
 case_id_data_path = os.path.dirname(os.path.abspath(__file__)) + '/case_id.xlsx'
 
 def case_data():
@@ -23,7 +21,7 @@
     # os.popen('pwd'testcase/)
     os.system('python3 -m pytest -s -v %s --cmdopt %d' % (case_id, device_num))
 
-
+#多设备运行
 def multi_device_operation():
     golVar.__init__()
     '''
@@ -31,12 +29,12 @@
         2 台，甚至 3 台进行同步测试，则需将原 case 文件分为 3 份：TestCase1.py、TestCase2.py、TestCase3.py 放入 case_pool 列表中，
         每台设备跑对应文件的测试 case
     '''
-    case_pool = ['TestCase2.py', 'TestCase3.py']
-    device_num = [0, 1]
+    case_pool = ['./case/TestCase2.py', './case/TestCase3.py']
+    # device_num = len(device_id_list)
     # which_case = case_data()
     p = Pool(len(case_pool))
     for i in range(len(case_pool)):
-        p.apply_async(execute_cmd, args=(case_pool[i], device_num[i]),)
+        p.apply_async(execute_cmd, args=(case_pool[i], i),)
     p.close()
     p.join()
 
Index: public/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># All_Auto\n## public\n####公共方法\n>包含系统方法、应用方法\n>\n>基本的操作方法，封装到Public下，方便后面调用\n>例如：find_class、find_id登录定位方法\n>\n>init是定义读取的配置文件 \n>BASE_CONF = get_data(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), \"config.ini\"))['App']\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/README.md b/public/README.md
--- a/public/README.md	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/public/README.md	(date 1640938475258)
@@ -1,10 +1,7 @@
-# All_Auto
+
 ## public
 ####公共方法
 >包含系统方法、应用方法
 >
 >基本的操作方法，封装到Public下，方便后面调用
 >例如：find_class、find_id登录定位方法
->
->init是定义读取的配置文件 
->BASE_CONF = get_data(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), "config.ini"))['App']
Index: page/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># All_Auto-page\n## PageObject\n>本目录存放页面对象\n>\n>例如home类中，存放的都是首页的基本操作对象，对象中有不同操作的方法并与home类的调用，以此类推\\\n>>每次添加新的page类都要引用init中的方法\\\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/page/README.md b/page/README.md
--- a/page/README.md	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/page/README.md	(date 1640938475261)
@@ -1,4 +1,4 @@
-# All_Auto-page
+
 ## PageObject
 >本目录存放页面对象
 >
Index: report/report.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\"/>\n    <title>Test Report</title>\n    <style>body {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n  /* do not increase min-width as some may use split screens */\n  min-width: 800px;\n  color: #999;\n}\n\nh1 {\n  font-size: 24px;\n  color: black;\n}\n\nh2 {\n  font-size: 16px;\n  color: black;\n}\n\np {\n  color: black;\n}\n\na {\n  color: #999;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\n/******************************\n * SUMMARY INFORMATION\n ******************************/\n#environment td {\n  padding: 5px;\n  border: 1px solid #E6E6E6;\n}\n#environment tr:nth-child(odd) {\n  background-color: #f6f6f6;\n}\n\n/******************************\n * TEST RESULT COLORS\n ******************************/\nspan.passed,\n.passed .col-result {\n  color: green;\n}\n\nspan.skipped,\nspan.xfailed,\nspan.rerun,\n.skipped .col-result,\n.xfailed .col-result,\n.rerun .col-result {\n  color: orange;\n}\n\nspan.error,\nspan.failed,\nspan.xpassed,\n.error .col-result,\n.failed .col-result,\n.xpassed .col-result {\n  color: red;\n}\n\n/******************************\n * RESULTS TABLE\n *\n * 1. Table Layout\n * 2. Extra\n * 3. Sorting items\n *\n ******************************/\n/*------------------\n * 1. Table Layout\n *------------------*/\n#results-table {\n  border: 1px solid #e6e6e6;\n  color: #999;\n  font-size: 12px;\n  width: 100%;\n}\n#results-table th,\n#results-table td {\n  padding: 5px;\n  border: 1px solid #E6E6E6;\n  text-align: left;\n}\n#results-table th {\n  font-weight: bold;\n}\n\n/*------------------\n * 2. Extra\n *------------------*/\n.log {\n  background-color: #e6e6e6;\n  border: 1px solid #e6e6e6;\n  color: black;\n  display: block;\n  font-family: \"Courier New\", Courier, monospace;\n  height: 230px;\n  overflow-y: scroll;\n  padding: 5px;\n  white-space: pre-wrap;\n}\n.log:only-child {\n  height: inherit;\n}\n\ndiv.image {\n  border: 1px solid #e6e6e6;\n  float: right;\n  height: 240px;\n  margin-left: 5px;\n  overflow: hidden;\n  width: 320px;\n}\ndiv.image img {\n  width: 320px;\n}\n\ndiv.video {\n  border: 1px solid #e6e6e6;\n  float: right;\n  height: 240px;\n  margin-left: 5px;\n  overflow: hidden;\n  width: 320px;\n}\ndiv.video video {\n  overflow: hidden;\n  width: 320px;\n  height: 240px;\n}\n\n.collapsed {\n  display: none;\n}\n\n.expander::after {\n  content: \" (show details)\";\n  color: #BBB;\n  font-style: italic;\n  cursor: pointer;\n}\n\n.collapser::after {\n  content: \" (hide details)\";\n  color: #BBB;\n  font-style: italic;\n  cursor: pointer;\n}\n\n/*------------------\n * 3. Sorting items\n *------------------*/\n.sortable {\n  cursor: pointer;\n}\n\n.sort-icon {\n  font-size: 0px;\n  float: left;\n  margin-right: 5px;\n  margin-top: 5px;\n  /*triangle*/\n  width: 0;\n  height: 0;\n  border-left: 8px solid transparent;\n  border-right: 8px solid transparent;\n}\n.inactive .sort-icon {\n  /*finish triangle*/\n  border-top: 8px solid #E6E6E6;\n}\n.asc.active .sort-icon {\n  /*finish triangle*/\n  border-bottom: 8px solid #999;\n}\n.desc.active .sort-icon {\n  /*finish triangle*/\n  border-top: 8px solid #999;\n}\n</style></head>\n  <body onLoad=\"init()\">\n    <script>/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n\nfunction toArray(iter) {\n    if (iter === null) {\n        return null;\n    }\n    return Array.prototype.slice.call(iter);\n}\n\nfunction find(selector, elem) { // eslint-disable-line no-redeclare\n    if (!elem) {\n        elem = document;\n    }\n    return elem.querySelector(selector);\n}\n\nfunction findAll(selector, elem) {\n    if (!elem) {\n        elem = document;\n    }\n    return toArray(elem.querySelectorAll(selector));\n}\n\nfunction sortColumn(elem) {\n    toggleSortStates(elem);\n    const colIndex = toArray(elem.parentNode.childNodes).indexOf(elem);\n    let key;\n    if (elem.classList.contains('result')) {\n        key = keyResult;\n    } else if (elem.classList.contains('links')) {\n        key = keyLink;\n    } else {\n        key = keyAlpha;\n    }\n    sortTable(elem, key(colIndex));\n}\n\nfunction showAllExtras() { // eslint-disable-line no-unused-vars\n    findAll('.col-result').forEach(showExtras);\n}\n\nfunction hideAllExtras() { // eslint-disable-line no-unused-vars\n    findAll('.col-result').forEach(hideExtras);\n}\n\nfunction showExtras(colresultElem) {\n    const extras = colresultElem.parentNode.nextElementSibling;\n    const expandcollapse = colresultElem.firstElementChild;\n    extras.classList.remove('collapsed');\n    expandcollapse.classList.remove('expander');\n    expandcollapse.classList.add('collapser');\n}\n\nfunction hideExtras(colresultElem) {\n    const extras = colresultElem.parentNode.nextElementSibling;\n    const expandcollapse = colresultElem.firstElementChild;\n    extras.classList.add('collapsed');\n    expandcollapse.classList.remove('collapser');\n    expandcollapse.classList.add('expander');\n}\n\nfunction showFilters() {\n    const filterItems = document.getElementsByClassName('filter');\n    for (let i = 0; i < filterItems.length; i++)\n        filterItems[i].hidden = false;\n}\n\nfunction addCollapse() {\n    // Add links for show/hide all\n    const resulttable = find('table#results-table');\n    const showhideall = document.createElement('p');\n    showhideall.innerHTML = '<a href=\"javascript:showAllExtras()\">Show all details</a> / ' +\n                            '<a href=\"javascript:hideAllExtras()\">Hide all details</a>';\n    resulttable.parentElement.insertBefore(showhideall, resulttable);\n\n    // Add show/hide link to each result\n    findAll('.col-result').forEach(function(elem) {\n        const collapsed = getQueryParameter('collapsed') || 'Passed';\n        const extras = elem.parentNode.nextElementSibling;\n        const expandcollapse = document.createElement('span');\n        if (extras.classList.contains('collapsed')) {\n            expandcollapse.classList.add('expander');\n        } else if (collapsed.includes(elem.innerHTML)) {\n            extras.classList.add('collapsed');\n            expandcollapse.classList.add('expander');\n        } else {\n            expandcollapse.classList.add('collapser');\n        }\n        elem.appendChild(expandcollapse);\n\n        elem.addEventListener('click', function(event) {\n            if (event.currentTarget.parentNode.nextElementSibling.classList.contains('collapsed')) {\n                showExtras(event.currentTarget);\n            } else {\n                hideExtras(event.currentTarget);\n            }\n        });\n    });\n}\n\nfunction getQueryParameter(name) {\n    const match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\n\nfunction init () { // eslint-disable-line no-unused-vars\n    resetSortHeaders();\n\n    addCollapse();\n\n    showFilters();\n\n    sortColumn(find('.initial-sort'));\n\n    findAll('.sortable').forEach(function(elem) {\n        elem.addEventListener('click',\n            function() {\n                sortColumn(elem);\n            }, false);\n    });\n}\n\nfunction sortTable(clicked, keyFunc) {\n    const rows = findAll('.results-table-row');\n    const reversed = !clicked.classList.contains('asc');\n    const sortedRows = sort(rows, keyFunc, reversed);\n    /* Whole table is removed here because browsers acts much slower\n     * when appending existing elements.\n     */\n    const thead = document.getElementById('results-table-head');\n    document.getElementById('results-table').remove();\n    const parent = document.createElement('table');\n    parent.id = 'results-table';\n    parent.appendChild(thead);\n    sortedRows.forEach(function(elem) {\n        parent.appendChild(elem);\n    });\n    document.getElementsByTagName('BODY')[0].appendChild(parent);\n}\n\nfunction sort(items, keyFunc, reversed) {\n    const sortArray = items.map(function(item, i) {\n        return [keyFunc(item), i];\n    });\n\n    sortArray.sort(function(a, b) {\n        const keyA = a[0];\n        const keyB = b[0];\n\n        if (keyA == keyB) return 0;\n\n        if (reversed) {\n            return keyA < keyB ? 1 : -1;\n        } else {\n            return keyA > keyB ? 1 : -1;\n        }\n    });\n\n    return sortArray.map(function(item) {\n        const index = item[1];\n        return items[index];\n    });\n}\n\nfunction keyAlpha(colIndex) {\n    return function(elem) {\n        return elem.childNodes[1].childNodes[colIndex].firstChild.data.toLowerCase();\n    };\n}\n\nfunction keyLink(colIndex) {\n    return function(elem) {\n        const dataCell = elem.childNodes[1].childNodes[colIndex].firstChild;\n        return dataCell == null ? '' : dataCell.innerText.toLowerCase();\n    };\n}\n\nfunction keyResult(colIndex) {\n    return function(elem) {\n        const strings = ['Error', 'Failed', 'Rerun', 'XFailed', 'XPassed',\n            'Skipped', 'Passed'];\n        return strings.indexOf(elem.childNodes[1].childNodes[colIndex].firstChild.data);\n    };\n}\n\nfunction resetSortHeaders() {\n    findAll('.sort-icon').forEach(function(elem) {\n        elem.parentNode.removeChild(elem);\n    });\n    findAll('.sortable').forEach(function(elem) {\n        const icon = document.createElement('div');\n        icon.className = 'sort-icon';\n        icon.textContent = 'vvv';\n        elem.insertBefore(icon, elem.firstChild);\n        elem.classList.remove('desc', 'active');\n        elem.classList.add('asc', 'inactive');\n    });\n}\n\nfunction toggleSortStates(elem) {\n    //if active, toggle between asc and desc\n    if (elem.classList.contains('active')) {\n        elem.classList.toggle('asc');\n        elem.classList.toggle('desc');\n    }\n\n    //if inactive, reset all other functions and add ascending active\n    if (elem.classList.contains('inactive')) {\n        resetSortHeaders();\n        elem.classList.remove('inactive');\n        elem.classList.add('active');\n    }\n}\n\nfunction isAllRowsHidden(value) {\n    return value.hidden == false;\n}\n\nfunction filterTable(elem) { // eslint-disable-line no-unused-vars\n    const outcomeAtt = 'data-test-result';\n    const outcome = elem.getAttribute(outcomeAtt);\n    const classOutcome = outcome + ' results-table-row';\n    const outcomeRows = document.getElementsByClassName(classOutcome);\n\n    for(let i = 0; i < outcomeRows.length; i++){\n        outcomeRows[i].hidden = !elem.checked;\n    }\n\n    const rows = findAll('.results-table-row').filter(isAllRowsHidden);\n    const allRowsHidden = rows.length == 0 ? true : false;\n    const notFoundMessage = document.getElementById('not-found-message');\n    notFoundMessage.hidden = !allRowsHidden;\n}\n</script>\n    <h1>report.html</h1>\n    <p>Report generated on 30-Dec-2021 at 16:57:54 by <a href=\"https://pypi.python.org/pypi/pytest-html\">pytest-html</a> v3.1.1</p>\n    <h2>Environment</h2>\n    <table id=\"environment\">\n      <tr>\n        <td>Packages</td>\n        <td>{\"pluggy\": \"0.13.1\", \"py\": \"1.10.0\", \"pytest\": \"6.2.4\"}</td></tr>\n      <tr>\n        <td>Platform</td>\n        <td>Darwin-18.7.0-x86_64-i386-64bit</td></tr>\n      <tr>\n        <td>Plugins</td>\n        <td>{\"allure-pytest\": \"2.9.45\", \"assume\": \"2.4.3\", \"html\": \"3.1.1\", \"metadata\": \"1.11.0\"}</td></tr>\n      <tr>\n        <td>Python</td>\n        <td>3.6.5</td></tr></table>\n    <h2>Summary</h2>\n    <p>1 tests ran in 96.04 seconds. </p>\n    <p class=\"filter\" hidden=\"true\">(Un)check the boxes to filter the results.</p><input checked=\"true\" class=\"filter\" data-test-result=\"passed\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"passed\">0 passed</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"skipped\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"skipped\">0 skipped</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"failed\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"failed\">1 failed</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"error\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"error\">0 errors</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"xfailed\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"xfailed\">0 expected failures</span>, <input checked=\"true\" class=\"filter\" data-test-result=\"xpassed\" disabled=\"true\" hidden=\"true\" name=\"filter_checkbox\" onChange=\"filterTable(this)\" type=\"checkbox\"/><span class=\"xpassed\">0 unexpected passes</span>\n    <h2>Results</h2>\n    <table id=\"results-table\">\n      <thead id=\"results-table-head\">\n        <tr>\n          <th class=\"sortable result initial-sort\" col=\"result\">Result</th>\n          <th class=\"sortable\" col=\"name\">Test</th>\n          <th class=\"sortable\" col=\"duration\">Duration</th>\n          <th class=\"sortable links\" col=\"links\">Links</th></tr>\n        <tr hidden=\"true\" id=\"not-found-message\">\n          <th colspan=\"4\">No results found. Try to check the filters</th></tr></thead>\n      <tbody class=\"failed results-table-row\">\n        <tr>\n          <td class=\"col-result\">Failed</td>\n          <td class=\"col-name\">case/TestCase.py::test_InputMethod_SCB_Func_01_01_0002</td>\n          <td class=\"col-duration\">95.77</td>\n          <td class=\"col-links\"></td></tr>\n        <tr>\n          <td class=\"extra\" colspan=\"4\">\n            <div class=\"empty log\">No log output captured.</div></td></tr></tbody></table></body></html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/report/report.html b/report/report.html
--- a/report/report.html	(revision 70f0145d34fe26d956f23d970f66ef12c2065cdc)
+++ b/report/report.html	(date 1640938475270)
@@ -429,7 +429,7 @@
 }
 </script>
     <h1>report.html</h1>
-    <p>Report generated on 30-Dec-2021 at 16:57:54 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a> v3.1.1</p>
+    <p>Report generated on 31-Dec-2021 at 16:08:33 by <a href="https://pypi.python.org/pypi/pytest-html">pytest-html</a> v3.1.1</p>
     <h2>Environment</h2>
     <table id="environment">
       <tr>
@@ -445,7 +445,7 @@
         <td>Python</td>
         <td>3.6.5</td></tr></table>
     <h2>Summary</h2>
-    <p>1 tests ran in 96.04 seconds. </p>
+    <p>1 tests ran in 12.69 seconds. </p>
     <p class="filter" hidden="true">(Un)check the boxes to filter the results.</p><input checked="true" class="filter" data-test-result="passed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="passed">0 passed</span>, <input checked="true" class="filter" data-test-result="skipped" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="skipped">0 skipped</span>, <input checked="true" class="filter" data-test-result="failed" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="failed">1 failed</span>, <input checked="true" class="filter" data-test-result="error" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="error">0 errors</span>, <input checked="true" class="filter" data-test-result="xfailed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="xfailed">0 expected failures</span>, <input checked="true" class="filter" data-test-result="xpassed" disabled="true" hidden="true" name="filter_checkbox" onChange="filterTable(this)" type="checkbox"/><span class="xpassed">0 unexpected passes</span>
     <h2>Results</h2>
     <table id="results-table">
@@ -460,8 +460,8 @@
       <tbody class="failed results-table-row">
         <tr>
           <td class="col-result">Failed</td>
-          <td class="col-name">case/TestCase.py::test_InputMethod_SCB_Func_01_01_0002</td>
-          <td class="col-duration">95.77</td>
+          <td class="col-name">case/TestCase2.py::test_InputMethod_SCB_Func_01_01_0002</td>
+          <td class="col-duration">12.38</td>
           <td class="col-links"></td></tr>
         <tr>
           <td class="extra" colspan="4">
