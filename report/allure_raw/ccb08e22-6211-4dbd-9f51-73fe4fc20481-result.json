{"name": "test_InputMethod_SCB_func_01_01_01_0001", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: '/Users/xm0726/PycharmProjects/logs/202106162032.txt'", "trace": "self = <KikaAutomator.testcase.TestCase.TestCase object at 0x10c46c190>\n\n    def setup(self):\n        print(\"se-up\")\n        # device_info = os.popen('adb devices').read()\n        device_id_list.clear()\n        from commons import start_service\n        list1 = start_service.start_devices()\n        for i in range(len(list1)):\n            device_id_list.append(list1[i])\n        device_id_list_num = len(device_id_list)\n        port_id = 4724\n        bp_id = 99\n        sys_port = 8200\n        if device_id_list_num != 0:\n            p = Pool(device_id_list_num)\n            print(p)\n    \n            for i in range(device_id_list_num):\n                port_id = port_id + 1\n                bp_id = bp_id + 1\n                sys_port = sys_port + 1\n                port_available = os.popen('lsof -i tcp:%d' % port_id).read()\n                pid = re.findall(r'(\\s\\d+\\s)', port_available)\n                port_available_last = ''.join(pid).strip()\n                try:\n                    os.system('kill %s' % port_available_last)\n                except Exception as e:\n                    # from util.log_info import Log_info\n                    Log_info('kill-port').getlog().debug(e)\n                try:\n                    # from commons.start_service import start_appium\n                    p.apply_async(start_appium, args=(port_id, bp_id, device_id_list[i],))\n                except Exception as e:\n                    Log_info('start-appium-test-case').getlog().debug(e)\n                # wait(10)\n                time.sleep(3)\n                try:\n                    self.input_page = App.start(self, port_id,\n                                                device_id_list[i],\n>                                               sys_port).set_default_method().agree_gdpr().back_to_input_page()\n\ntestcase/TestCase.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <KikaAutomator.testcase.TestCase.TestCase object at 0x10c46c190>, port = 4725, device = '2962de230205', sysPort = 8201\n\n    def start(self, port, device, sysPort):\n        caps = {'platformName': 'Android', 'platformVersion': '9', 'deviceName': 'nexus 6p',\n                'newCommandTimeout': 2000,\n                'appPackage': 'com.huawei.ohos.inputmethod',\n                'appActivity': 'com.appstore.view.activity.PrimaryActivity',\n                'systemPort': sysPort,\n                'id': device}\n    \n        self.driver = webdriver.Remote('http://localhost:'+str(port)+'/wd/hub', caps)\n        # self.update_settings({\"normalizeTagNames\": True})\n        self.driver.implicitly_wait(5)\n>       Log_info('start-driver').getlog().debug(self.driver)\n\npage/app.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <util.log_info.Log_info object at 0x10b25a210>, logger = 'start-driver'\n\n    def __init__(self, logger):\n        self.logger = logging.getLogger(logger)\n        self.logger.setLevel(logging.DEBUG)\n    \n        rq = time.strftime('%Y%m%d%H%M', time.localtime(time.time()))\n        log_name = rq + '.txt'\n        log_path = os.path.join('../logs', log_name)\n    \n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n>       fh = logging.FileHandler(filename=log_path, mode='a', encoding='utf-8')\n\nutil/log_info.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'FileHandler' object has no attribute 'level'\") raised in repr()] FileHandler object at 0x10c52f610>, filename = '../logs/202106162032.txt', mode = 'a', encoding = 'utf-8', delay = False\n\n    def __init__(self, filename, mode='a', encoding=None, delay=False):\n        \"\"\"\n        Open the specified file and use it as the stream for logging.\n        \"\"\"\n        # Issue #27493: add support for Path objects to be passed in\n        filename = os.fspath(filename)\n        #keep the absolute path, otherwise derived classes which use this\n        #may come a cropper when the current directory changes\n        self.baseFilename = os.path.abspath(filename)\n        self.mode = mode\n        self.encoding = encoding\n        self.delay = delay\n        if delay:\n            #We don't open the stream, but we still need to call the\n            #Handler constructor to set level, formatter, lock etc.\n            Handler.__init__(self)\n            self.stream = None\n        else:\n>           StreamHandler.__init__(self, self._open())\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1087: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'FileHandler' object has no attribute 'level'\") raised in repr()] FileHandler object at 0x10c52f610>\n\n    def _open(self):\n        \"\"\"\n        Open the current base file with the (original) mode and encoding.\n        Return the resulting stream.\n        \"\"\"\n>       return open(self.baseFilename, self.mode, encoding=self.encoding)\nE       FileNotFoundError: [Errno 2] No such file or directory: '/Users/xm0726/PycharmProjects/logs/202106162032.txt'\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1116: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <KikaAutomator.testcase.TestCase.TestCase object at 0x10c46c190>\n\n    def setup(self):\n        print(\"se-up\")\n        # device_info = os.popen('adb devices').read()\n        device_id_list.clear()\n        from commons import start_service\n        list1 = start_service.start_devices()\n        for i in range(len(list1)):\n            device_id_list.append(list1[i])\n        device_id_list_num = len(device_id_list)\n        port_id = 4724\n        bp_id = 99\n        sys_port = 8200\n        if device_id_list_num != 0:\n            p = Pool(device_id_list_num)\n            print(p)\n    \n            for i in range(device_id_list_num):\n                port_id = port_id + 1\n                bp_id = bp_id + 1\n                sys_port = sys_port + 1\n                port_available = os.popen('lsof -i tcp:%d' % port_id).read()\n                pid = re.findall(r'(\\s\\d+\\s)', port_available)\n                port_available_last = ''.join(pid).strip()\n                try:\n                    os.system('kill %s' % port_available_last)\n                except Exception as e:\n                    # from util.log_info import Log_info\n                    Log_info('kill-port').getlog().debug(e)\n                try:\n                    # from commons.start_service import start_appium\n                    p.apply_async(start_appium, args=(port_id, bp_id, device_id_list[i],))\n                except Exception as e:\n                    Log_info('start-appium-test-case').getlog().debug(e)\n                # wait(10)\n                time.sleep(3)\n                try:\n                    self.input_page = App.start(self, port_id,\n                                                device_id_list[i],\n                                                sys_port).set_default_method().agree_gdpr().back_to_input_page()\n                except Exception as e:\n                    # print('c')\n>                   Log_info('start-drive-test-case').getlog().debug(e)\n\ntestcase/TestCase.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutil/log_info.py:16: in __init__\n    fh = logging.FileHandler(filename=log_path, mode='a', encoding='utf-8')\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1087: in __init__\n    StreamHandler.__init__(self, self._open())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'FileHandler' object has no attribute 'level'\") raised in repr()] FileHandler object at 0x10c52f750>\n\n    def _open(self):\n        \"\"\"\n        Open the current base file with the (original) mode and encoding.\n        Return the resulting stream.\n        \"\"\"\n>       return open(self.baseFilename, self.mode, encoding=self.encoding)\nE       FileNotFoundError: [Errno 2] No such file or directory: '/Users/xm0726/PycharmProjects/logs/202106162032.txt'\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/logging/__init__.py:1116: FileNotFoundError"}, "attachments": [{"name": "stdout", "source": "50beac80-487f-42a9-8de8-dada22f15f5b-attachment.txt", "type": "text/plain"}], "start": 1623846709655, "stop": 1623846709655, "uuid": "fc52f127-2f8a-4ccd-abb8-e4a1be4c3ecc", "historyId": "503cca8efee5bf6cd40c07f27e61d3db", "testCaseId": "a34a8b69b3270334f3f104aeb4d043d1", "fullName": "testcase.TestCase.TestCase#test_InputMethod_SCB_func_01_01_01_0001", "labels": [{"name": "story", "value": "英文键盘，输字母后删除"}, {"name": "feature", "value": "测试"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "TestCase"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "shawn.local"}, {"name": "thread", "value": "7818-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.TestCase"}]}